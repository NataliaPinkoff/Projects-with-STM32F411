ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	hadc1
  20              		.section	.bss.hadc1,"aw",%nobits
  21              		.align	2
  24              	hadc1:
  25 0000 00000000 		.space	72
  25      00000000 
  25      00000000 
  25      00000000 
  25      00000000 
  26              		.global	htim3
  27              		.section	.bss.htim3,"aw",%nobits
  28              		.align	2
  31              	htim3:
  32 0000 00000000 		.space	72
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.global	htim4
  34              		.section	.bss.htim4,"aw",%nobits
  35              		.align	2
  38              	htim4:
  39 0000 00000000 		.space	72
  39      00000000 
  39      00000000 
  39      00000000 
  39      00000000 
  40              		.global	read
  41              		.section	.bss.read,"aw",%nobits
  42              		.align	2
  45              	read:
  46 0000 00000000 		.space	4
  47              		.global	gCont
  48              		.section	.bss.gCont,"aw",%nobits
  49              		.align	1
  52              	gCont:
  53 0000 0000     		.space	2
  54              		.global	gLeds
  55              		.section	.bss.gLeds,"aw",%nobits
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 2


  56              		.align	1
  59              	gLeds:
  60 0000 0000     		.space	2
  61              		.global	min_read
  62              		.section	.rodata.min_read,"a"
  63              		.align	2
  66              	min_read:
  67 0000 6B030000 		.word	875
  68              		.global	max_read
  69              		.section	.rodata.max_read,"a"
  70              		.align	2
  73              	max_read:
  74 0000 68100000 		.word	4200
  75              		.global	buffer
  76              		.section	.bss.buffer,"aw",%nobits
  77              		.align	2
  80              	buffer:
  81 0000 00000000 		.space	255
  81      00000000 
  81      00000000 
  81      00000000 
  81      00000000 
  82              		.global	count
  83              		.section	.bss.count,"aw",%nobits
  84              		.align	2
  87              	count:
  88 0000 00000000 		.space	4
  89              		.section	.rodata
  90              		.align	2
  91              	.LC0:
  92 0000 54656E73 		.ascii	"Tensao no ADC %d mV\015 \012\000"
  92      616F206E 
  92      6F204144 
  92      43202564 
  92      206D560D 
  93              		.section	.text.main,"ax",%progbits
  94              		.align	1
  95              		.global	main
  96              		.syntax unified
  97              		.thumb
  98              		.thumb_func
 100              	main:
 101              	.LFB224:
 102              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****  ******************************************************************************
   4:Core/Src/main.c ****  * @file           : main.c
   5:Core/Src/main.c ****  * @brief          : Main program body
   6:Core/Src/main.c ****  ******************************************************************************
   7:Core/Src/main.c ****  * @attention
   8:Core/Src/main.c ****  *
   9:Core/Src/main.c ****  * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****  * All rights reserved.
  11:Core/Src/main.c ****  *
  12:Core/Src/main.c ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****  * in the root directory of this software component.
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 3


  14:Core/Src/main.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****  *
  16:Core/Src/main.c ****  ******************************************************************************
  17:Core/Src/main.c ****  */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "usb_device.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  46:Core/Src/main.c **** TIM_HandleTypeDef htim4;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE BEGIN PV */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE END PV */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  53:Core/Src/main.c **** void SystemClock_Config(void);
  54:Core/Src/main.c **** static void MX_GPIO_Init(void);
  55:Core/Src/main.c **** static void MX_TIM4_Init(void);
  56:Core/Src/main.c **** static void MX_ADC1_Init(void);
  57:Core/Src/main.c **** static void MX_TIM3_Init(void);
  58:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** /* USER CODE END PFP */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  63:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  64:Core/Src/main.c **** int16_t read[2];
  65:Core/Src/main.c **** int16_t gCont;
  66:Core/Src/main.c **** int16_t gLeds;
  67:Core/Src/main.c **** const int32_t min_read = 875;
  68:Core/Src/main.c **** const int32_t max_read = 4200;
  69:Core/Src/main.c **** uint8_t buffer[255];
  70:Core/Src/main.c **** uint32_t count = 0;
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 4


  71:Core/Src/main.c **** /* USER CODE END 0 */
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** /**
  74:Core/Src/main.c ****   * @brief  The application entry point.
  75:Core/Src/main.c ****   * @retval int
  76:Core/Src/main.c ****   */
  77:Core/Src/main.c **** int main(void)
  78:Core/Src/main.c **** {
 103              		.loc 1 78 1
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 1, uses_anonymous_args = 0
 107 0000 80B5     		push	{r7, lr}
 108              	.LCFI0:
 109              		.cfi_def_cfa_offset 8
 110              		.cfi_offset 7, -8
 111              		.cfi_offset 14, -4
 112 0002 00AF     		add	r7, sp, #0
 113              	.LCFI1:
 114              		.cfi_def_cfa_register 7
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c ****   /* USER CODE END 1 */
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  87:Core/Src/main.c ****   HAL_Init();
 115              		.loc 1 87 3
 116 0004 FFF7FEFF 		bl	HAL_Init
  88:Core/Src/main.c **** 
  89:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  90:Core/Src/main.c **** 
  91:Core/Src/main.c ****   /* USER CODE END Init */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* Configure the system clock */
  94:Core/Src/main.c ****   SystemClock_Config();
 117              		.loc 1 94 3
 118 0008 FFF7FEFF 		bl	SystemClock_Config
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* USER CODE END SysInit */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* Initialize all configured peripherals */
 101:Core/Src/main.c ****   MX_GPIO_Init();
 119              		.loc 1 101 3
 120 000c FFF7FEFF 		bl	MX_GPIO_Init
 102:Core/Src/main.c ****   MX_TIM4_Init();
 121              		.loc 1 102 3
 122 0010 FFF7FEFF 		bl	MX_TIM4_Init
 103:Core/Src/main.c ****   MX_ADC1_Init();
 123              		.loc 1 103 3
 124 0014 FFF7FEFF 		bl	MX_ADC1_Init
 104:Core/Src/main.c ****   MX_TIM3_Init();
 125              		.loc 1 104 3
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 5


 126 0018 FFF7FEFF 		bl	MX_TIM3_Init
 105:Core/Src/main.c ****   MX_USB_DEVICE_Init();
 127              		.loc 1 105 3
 128 001c FFF7FEFF 		bl	MX_USB_DEVICE_Init
 106:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 129              		.loc 1 108 3
 130 0020 0021     		movs	r1, #0
 131 0022 3C48     		ldr	r0, .L3
 132 0024 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 109:Core/Src/main.c ****   htim3.Instance->CCR1 = 0;
 133              		.loc 1 109 8
 134 0028 3A4B     		ldr	r3, .L3
 135 002a 1B68     		ldr	r3, [r3]
 136              		.loc 1 109 24
 137 002c 0022     		movs	r2, #0
 138 002e 5A63     		str	r2, [r3, #52]
 139              	.L2:
 140              	.LBB4:
 110:Core/Src/main.c ****   /* USER CODE END 2 */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****   /* Infinite loop */
 113:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 114:Core/Src/main.c ****   while (1)
 115:Core/Src/main.c ****   {
 116:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
 141              		.loc 1 116 5 discriminator 1
 142 0030 3948     		ldr	r0, .L3+4
 143 0032 FFF7FEFF 		bl	HAL_ADC_Start
 117:Core/Src/main.c ****     HAL_ADC_PollForConversion(&hadc1, 100);
 144              		.loc 1 117 5 discriminator 1
 145 0036 6421     		movs	r1, #100
 146 0038 3748     		ldr	r0, .L3+4
 147 003a FFF7FEFF 		bl	HAL_ADC_PollForConversion
 118:Core/Src/main.c ****     read[0] = HAL_ADC_GetValue(&hadc1);
 148              		.loc 1 118 15 discriminator 1
 149 003e 3648     		ldr	r0, .L3+4
 150 0040 FFF7FEFF 		bl	HAL_ADC_GetValue
 151 0044 0346     		mov	r3, r0
 152              		.loc 1 118 13 discriminator 1
 153 0046 1AB2     		sxth	r2, r3
 154 0048 344B     		ldr	r3, .L3+8
 155 004a 1A80     		strh	r2, [r3]	@ movhi
 119:Core/Src/main.c ****     gCont = 5 - 5 * (((float)read[0] - min_read) / ((float)max_read - (float)min_read));
 156              		.loc 1 119 34 discriminator 1
 157 004c 334B     		ldr	r3, .L3+8
 158 004e B3F90030 		ldrsh	r3, [r3]
 159              		.loc 1 119 23 discriminator 1
 160 0052 07EE903A 		vmov	s15, r3	@ int
 161 0056 B8EEE77A 		vcvt.f32.s32	s14, s15
 162              		.loc 1 119 38 discriminator 1
 163 005a DFED317A 		vldr.32	s15, .L3+12	@ int
 164 005e F8EEE77A 		vcvt.f32.s32	s15, s15
 165 0062 77EE676A 		vsub.f32	s13, s14, s15
 166              		.loc 1 119 53 discriminator 1
 167 0066 DFED2F7A 		vldr.32	s15, .L3+16	@ int
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 6


 168 006a B8EEE77A 		vcvt.f32.s32	s14, s15
 169              		.loc 1 119 71 discriminator 1
 170 006e DFED2C7A 		vldr.32	s15, .L3+12	@ int
 171 0072 F8EEE77A 		vcvt.f32.s32	s15, s15
 172              		.loc 1 119 69 discriminator 1
 173 0076 37EE677A 		vsub.f32	s14, s14, s15
 174              		.loc 1 119 50 discriminator 1
 175 007a C6EE877A 		vdiv.f32	s15, s13, s14
 176              		.loc 1 119 19 discriminator 1
 177 007e B1EE047A 		vmov.f32	s14, #5.0e+0
 178 0082 67EE877A 		vmul.f32	s15, s15, s14
 179              		.loc 1 119 15 discriminator 1
 180 0086 B1EE047A 		vmov.f32	s14, #5.0e+0
 181 008a 77EE677A 		vsub.f32	s15, s14, s15
 182              		.loc 1 119 11 discriminator 1
 183 008e FDEEE77A 		vcvt.s32.f32	s15, s15
 184 0092 17EE903A 		vmov	r3, s15	@ int
 185 0096 1AB2     		sxth	r2, r3
 186 0098 234B     		ldr	r3, .L3+20
 187 009a 1A80     		strh	r2, [r3]	@ movhi
 120:Core/Src/main.c ****     gLeds = (1 << gCont) - 1;
 188              		.loc 1 120 16 discriminator 1
 189 009c 224B     		ldr	r3, .L3+20
 190 009e B3F90030 		ldrsh	r3, [r3]
 191 00a2 1A46     		mov	r2, r3
 192 00a4 0123     		movs	r3, #1
 193 00a6 9340     		lsls	r3, r3, r2
 194              		.loc 1 120 26 discriminator 1
 195 00a8 9BB2     		uxth	r3, r3
 196 00aa 013B     		subs	r3, r3, #1
 197 00ac 9BB2     		uxth	r3, r3
 198 00ae 1AB2     		sxth	r2, r3
 199              		.loc 1 120 11 discriminator 1
 200 00b0 1E4B     		ldr	r3, .L3+24
 201 00b2 1A80     		strh	r2, [r3]	@ movhi
 121:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, 31 << 3, 0);
 202              		.loc 1 121 5 discriminator 1
 203 00b4 0022     		movs	r2, #0
 204 00b6 F821     		movs	r1, #248
 205 00b8 1D48     		ldr	r0, .L3+28
 206 00ba FFF7FEFF 		bl	HAL_GPIO_WritePin
 122:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, gLeds << 3, 1);
 207              		.loc 1 122 5 discriminator 1
 208 00be 1B4B     		ldr	r3, .L3+24
 209 00c0 B3F90030 		ldrsh	r3, [r3]
 210 00c4 9BB2     		uxth	r3, r3
 211 00c6 DB00     		lsls	r3, r3, #3
 212 00c8 9BB2     		uxth	r3, r3
 213 00ca 0122     		movs	r2, #1
 214 00cc 1946     		mov	r1, r3
 215 00ce 1848     		ldr	r0, .L3+28
 216 00d0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 123:Core/Src/main.c ****     Hal_Delay(10);
 217              		.loc 1 123 5 discriminator 1
 218 00d4 0A20     		movs	r0, #10
 219 00d6 FFF7FEFF 		bl	Hal_Delay
 124:Core/Src/main.c ****     sprintf(buffer, "Tensao no ADC %d mV\r \n", (read[0] * 3300) / 4095);
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 7


 220              		.loc 1 124 54 discriminator 1
 221 00da 104B     		ldr	r3, .L3+8
 222 00dc B3F90030 		ldrsh	r3, [r3]
 223 00e0 1A46     		mov	r2, r3
 224              		.loc 1 124 58 discriminator 1
 225 00e2 40F6E443 		movw	r3, #3300
 226 00e6 02FB03F3 		mul	r3, r2, r3
 227              		.loc 1 124 5 discriminator 1
 228 00ea 124A     		ldr	r2, .L3+32
 229 00ec 82FB0312 		smull	r1, r2, r2, r3
 230 00f0 1A44     		add	r2, r2, r3
 231 00f2 D212     		asrs	r2, r2, #11
 232 00f4 DB17     		asrs	r3, r3, #31
 233 00f6 D31A     		subs	r3, r2, r3
 234 00f8 1A46     		mov	r2, r3
 235 00fa 0F49     		ldr	r1, .L3+36
 236 00fc 0F48     		ldr	r0, .L3+40
 237 00fe FFF7FEFF 		bl	sprintf
 125:Core/Src/main.c ****     CDC_Transmit_FS(buffer, strlen(buffer)); 
 238              		.loc 1 125 5 discriminator 1
 239 0102 0E48     		ldr	r0, .L3+40
 240 0104 FFF7FEFF 		bl	strlen
 241 0108 0346     		mov	r3, r0
 242 010a 1946     		mov	r1, r3
 243 010c 0B48     		ldr	r0, .L3+40
 244 010e FFF7FEFF 		bl	CDC_Transmit_FS
 245              	.LBE4:
 115:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
 246              		.loc 1 115 3 discriminator 1
 247 0112 8DE7     		b	.L2
 248              	.L4:
 249              		.align	2
 250              	.L3:
 251 0114 00000000 		.word	htim3
 252 0118 00000000 		.word	hadc1
 253 011c 00000000 		.word	read
 254 0120 6B030000 		.word	875
 255 0124 68100000 		.word	4200
 256 0128 00000000 		.word	gCont
 257 012c 00000000 		.word	gLeds
 258 0130 00000240 		.word	1073872896
 259 0134 81000880 		.word	-2146959231
 260 0138 00000000 		.word	.LC0
 261 013c 00000000 		.word	buffer
 262              		.cfi_endproc
 263              	.LFE224:
 265              		.section	.text.SystemClock_Config,"ax",%progbits
 266              		.align	1
 267              		.global	SystemClock_Config
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 272              	SystemClock_Config:
 273              	.LFB225:
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 128:Core/Src/main.c **** 
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 8


 129:Core/Src/main.c ****     /* USER CODE END WHILE */
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****     /* USER CODE END WHILE */
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 136:Core/Src/main.c **** 
 137:Core/Src/main.c ****     /* USER CODE END WHILE */
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****     /* USER CODE END WHILE */
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****     /* USER CODE END WHILE */
 146:Core/Src/main.c **** 
 147:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 148:Core/Src/main.c **** 
 149:Core/Src/main.c ****     /* USER CODE END WHILE */
 150:Core/Src/main.c ****   }
 151:Core/Src/main.c ****   /* USER CODE END 3 */
 152:Core/Src/main.c **** }
 153:Core/Src/main.c **** 
 154:Core/Src/main.c **** /**
 155:Core/Src/main.c ****   * @brief System Clock Configuration
 156:Core/Src/main.c ****   * @retval None
 157:Core/Src/main.c ****   */
 158:Core/Src/main.c **** void SystemClock_Config(void)
 159:Core/Src/main.c **** {
 274              		.loc 1 159 1
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 80
 277              		@ frame_needed = 1, uses_anonymous_args = 0
 278 0000 80B5     		push	{r7, lr}
 279              	.LCFI2:
 280              		.cfi_def_cfa_offset 8
 281              		.cfi_offset 7, -8
 282              		.cfi_offset 14, -4
 283 0002 94B0     		sub	sp, sp, #80
 284              	.LCFI3:
 285              		.cfi_def_cfa_offset 88
 286 0004 00AF     		add	r7, sp, #0
 287              	.LCFI4:
 288              		.cfi_def_cfa_register 7
 160:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 289              		.loc 1 160 22
 290 0006 07F12003 		add	r3, r7, #32
 291 000a 3022     		movs	r2, #48
 292 000c 0021     		movs	r1, #0
 293 000e 1846     		mov	r0, r3
 294 0010 FFF7FEFF 		bl	memset
 161:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 295              		.loc 1 161 22
 296 0014 07F10C03 		add	r3, r7, #12
 297 0018 0022     		movs	r2, #0
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 9


 298 001a 1A60     		str	r2, [r3]
 299 001c 5A60     		str	r2, [r3, #4]
 300 001e 9A60     		str	r2, [r3, #8]
 301 0020 DA60     		str	r2, [r3, #12]
 302 0022 1A61     		str	r2, [r3, #16]
 303              	.LBB5:
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 164:Core/Src/main.c ****   */
 165:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 304              		.loc 1 165 3
 305 0024 0023     		movs	r3, #0
 306 0026 BB60     		str	r3, [r7, #8]
 307 0028 274B     		ldr	r3, .L9
 308 002a 1B6C     		ldr	r3, [r3, #64]
 309 002c 264A     		ldr	r2, .L9
 310 002e 43F08053 		orr	r3, r3, #268435456
 311 0032 1364     		str	r3, [r2, #64]
 312 0034 244B     		ldr	r3, .L9
 313 0036 1B6C     		ldr	r3, [r3, #64]
 314 0038 03F08053 		and	r3, r3, #268435456
 315 003c BB60     		str	r3, [r7, #8]
 316 003e BB68     		ldr	r3, [r7, #8]
 317              	.LBE5:
 318              	.LBB6:
 166:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 319              		.loc 1 166 3
 320 0040 0023     		movs	r3, #0
 321 0042 7B60     		str	r3, [r7, #4]
 322 0044 214B     		ldr	r3, .L9+4
 323 0046 1B68     		ldr	r3, [r3]
 324 0048 204A     		ldr	r2, .L9+4
 325 004a 43F44043 		orr	r3, r3, #49152
 326 004e 1360     		str	r3, [r2]
 327 0050 1E4B     		ldr	r3, .L9+4
 328 0052 1B68     		ldr	r3, [r3]
 329 0054 03F44043 		and	r3, r3, #49152
 330 0058 7B60     		str	r3, [r7, #4]
 331 005a 7B68     		ldr	r3, [r7, #4]
 332              	.LBE6:
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 169:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 170:Core/Src/main.c ****   */
 171:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 333              		.loc 1 171 36
 334 005c 0123     		movs	r3, #1
 335 005e 3B62     		str	r3, [r7, #32]
 172:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 336              		.loc 1 172 30
 337 0060 4FF48033 		mov	r3, #65536
 338 0064 7B62     		str	r3, [r7, #36]
 173:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 339              		.loc 1 173 34
 340 0066 0223     		movs	r3, #2
 341 0068 BB63     		str	r3, [r7, #56]
 174:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 10


 342              		.loc 1 174 35
 343 006a 4FF48003 		mov	r3, #4194304
 344 006e FB63     		str	r3, [r7, #60]
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 25;
 345              		.loc 1 175 30
 346 0070 1923     		movs	r3, #25
 347 0072 3B64     		str	r3, [r7, #64]
 176:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 192;
 348              		.loc 1 176 30
 349 0074 C023     		movs	r3, #192
 350 0076 7B64     		str	r3, [r7, #68]
 177:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 351              		.loc 1 177 30
 352 0078 0223     		movs	r3, #2
 353 007a BB64     		str	r3, [r7, #72]
 178:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 354              		.loc 1 178 30
 355 007c 0423     		movs	r3, #4
 356 007e FB64     		str	r3, [r7, #76]
 179:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 357              		.loc 1 179 7
 358 0080 07F12003 		add	r3, r7, #32
 359 0084 1846     		mov	r0, r3
 360 0086 FFF7FEFF 		bl	HAL_RCC_OscConfig
 361 008a 0346     		mov	r3, r0
 362              		.loc 1 179 6
 363 008c 002B     		cmp	r3, #0
 364 008e 01D0     		beq	.L6
 180:Core/Src/main.c ****   {
 181:Core/Src/main.c ****     Error_Handler();
 365              		.loc 1 181 5
 366 0090 FFF7FEFF 		bl	Error_Handler
 367              	.L6:
 182:Core/Src/main.c ****   }
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 185:Core/Src/main.c ****   */
 186:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 368              		.loc 1 186 31
 369 0094 0F23     		movs	r3, #15
 370 0096 FB60     		str	r3, [r7, #12]
 187:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 188:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 371              		.loc 1 188 34
 372 0098 0223     		movs	r3, #2
 373 009a 3B61     		str	r3, [r7, #16]
 189:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 374              		.loc 1 189 35
 375 009c 0023     		movs	r3, #0
 376 009e 7B61     		str	r3, [r7, #20]
 190:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 377              		.loc 1 190 36
 378 00a0 4FF48053 		mov	r3, #4096
 379 00a4 BB61     		str	r3, [r7, #24]
 191:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 380              		.loc 1 191 36
 381 00a6 0023     		movs	r3, #0
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 11


 382 00a8 FB61     		str	r3, [r7, #28]
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 383              		.loc 1 193 7
 384 00aa 07F10C03 		add	r3, r7, #12
 385 00ae 0321     		movs	r1, #3
 386 00b0 1846     		mov	r0, r3
 387 00b2 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 388 00b6 0346     		mov	r3, r0
 389              		.loc 1 193 6
 390 00b8 002B     		cmp	r3, #0
 391 00ba 01D0     		beq	.L8
 194:Core/Src/main.c ****   {
 195:Core/Src/main.c ****     Error_Handler();
 392              		.loc 1 195 5
 393 00bc FFF7FEFF 		bl	Error_Handler
 394              	.L8:
 196:Core/Src/main.c ****   }
 197:Core/Src/main.c **** }
 395              		.loc 1 197 1
 396 00c0 00BF     		nop
 397 00c2 5037     		adds	r7, r7, #80
 398              	.LCFI5:
 399              		.cfi_def_cfa_offset 8
 400 00c4 BD46     		mov	sp, r7
 401              	.LCFI6:
 402              		.cfi_def_cfa_register 13
 403              		@ sp needed
 404 00c6 80BD     		pop	{r7, pc}
 405              	.L10:
 406              		.align	2
 407              	.L9:
 408 00c8 00380240 		.word	1073887232
 409 00cc 00700040 		.word	1073770496
 410              		.cfi_endproc
 411              	.LFE225:
 413              		.section	.text.MX_ADC1_Init,"ax",%progbits
 414              		.align	1
 415              		.syntax unified
 416              		.thumb
 417              		.thumb_func
 419              	MX_ADC1_Init:
 420              	.LFB226:
 198:Core/Src/main.c **** 
 199:Core/Src/main.c **** /**
 200:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 201:Core/Src/main.c ****   * @param None
 202:Core/Src/main.c ****   * @retval None
 203:Core/Src/main.c ****   */
 204:Core/Src/main.c **** static void MX_ADC1_Init(void)
 205:Core/Src/main.c **** {
 421              		.loc 1 205 1
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 16
 424              		@ frame_needed = 1, uses_anonymous_args = 0
 425 0000 80B5     		push	{r7, lr}
 426              	.LCFI7:
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 12


 427              		.cfi_def_cfa_offset 8
 428              		.cfi_offset 7, -8
 429              		.cfi_offset 14, -4
 430 0002 84B0     		sub	sp, sp, #16
 431              	.LCFI8:
 432              		.cfi_def_cfa_offset 24
 433 0004 00AF     		add	r7, sp, #0
 434              	.LCFI9:
 435              		.cfi_def_cfa_register 7
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 436              		.loc 1 211 26
 437 0006 3B46     		mov	r3, r7
 438 0008 0022     		movs	r2, #0
 439 000a 1A60     		str	r2, [r3]
 440 000c 5A60     		str	r2, [r3, #4]
 441 000e 9A60     		str	r2, [r3, #8]
 442 0010 DA60     		str	r2, [r3, #12]
 212:Core/Src/main.c **** 
 213:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 218:Core/Src/main.c ****   */
 219:Core/Src/main.c ****   hadc1.Instance = ADC1;
 443              		.loc 1 219 18
 444 0012 214B     		ldr	r3, .L15
 445 0014 214A     		ldr	r2, .L15+4
 446 0016 1A60     		str	r2, [r3]
 220:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 447              		.loc 1 220 29
 448 0018 1F4B     		ldr	r3, .L15
 449 001a 4FF48032 		mov	r2, #65536
 450 001e 5A60     		str	r2, [r3, #4]
 221:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 451              		.loc 1 221 25
 452 0020 1D4B     		ldr	r3, .L15
 453 0022 0022     		movs	r2, #0
 454 0024 9A60     		str	r2, [r3, #8]
 222:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 455              		.loc 1 222 27
 456 0026 1C4B     		ldr	r3, .L15
 457 0028 0022     		movs	r2, #0
 458 002a 1A61     		str	r2, [r3, #16]
 223:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 459              		.loc 1 223 33
 460 002c 1A4B     		ldr	r3, .L15
 461 002e 0022     		movs	r2, #0
 462 0030 1A76     		strb	r2, [r3, #24]
 224:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 463              		.loc 1 224 36
 464 0032 194B     		ldr	r3, .L15
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 13


 465 0034 0022     		movs	r2, #0
 466 0036 83F82020 		strb	r2, [r3, #32]
 225:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 467              		.loc 1 225 35
 468 003a 174B     		ldr	r3, .L15
 469 003c 0022     		movs	r2, #0
 470 003e DA62     		str	r2, [r3, #44]
 226:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 471              		.loc 1 226 31
 472 0040 154B     		ldr	r3, .L15
 473 0042 174A     		ldr	r2, .L15+8
 474 0044 9A62     		str	r2, [r3, #40]
 227:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 475              		.loc 1 227 24
 476 0046 144B     		ldr	r3, .L15
 477 0048 0022     		movs	r2, #0
 478 004a DA60     		str	r2, [r3, #12]
 228:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 479              		.loc 1 228 30
 480 004c 124B     		ldr	r3, .L15
 481 004e 0122     		movs	r2, #1
 482 0050 DA61     		str	r2, [r3, #28]
 229:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 483              		.loc 1 229 36
 484 0052 114B     		ldr	r3, .L15
 485 0054 0022     		movs	r2, #0
 486 0056 83F83020 		strb	r2, [r3, #48]
 230:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 487              		.loc 1 230 27
 488 005a 0F4B     		ldr	r3, .L15
 489 005c 0122     		movs	r2, #1
 490 005e 5A61     		str	r2, [r3, #20]
 231:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 491              		.loc 1 231 7
 492 0060 0D48     		ldr	r0, .L15
 493 0062 FFF7FEFF 		bl	HAL_ADC_Init
 494 0066 0346     		mov	r3, r0
 495              		.loc 1 231 6
 496 0068 002B     		cmp	r3, #0
 497 006a 01D0     		beq	.L12
 232:Core/Src/main.c ****   {
 233:Core/Src/main.c ****     Error_Handler();
 498              		.loc 1 233 5
 499 006c FFF7FEFF 		bl	Error_Handler
 500              	.L12:
 234:Core/Src/main.c ****   }
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 237:Core/Src/main.c ****   */
 238:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 501              		.loc 1 238 19
 502 0070 0023     		movs	r3, #0
 503 0072 3B60     		str	r3, [r7]
 239:Core/Src/main.c ****   sConfig.Rank = 1;
 504              		.loc 1 239 16
 505 0074 0123     		movs	r3, #1
 506 0076 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 14


 240:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 507              		.loc 1 240 24
 508 0078 0023     		movs	r3, #0
 509 007a BB60     		str	r3, [r7, #8]
 241:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 510              		.loc 1 241 7
 511 007c 3B46     		mov	r3, r7
 512 007e 1946     		mov	r1, r3
 513 0080 0548     		ldr	r0, .L15
 514 0082 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 515 0086 0346     		mov	r3, r0
 516              		.loc 1 241 6
 517 0088 002B     		cmp	r3, #0
 518 008a 01D0     		beq	.L14
 242:Core/Src/main.c ****   {
 243:Core/Src/main.c ****     Error_Handler();
 519              		.loc 1 243 5
 520 008c FFF7FEFF 		bl	Error_Handler
 521              	.L14:
 244:Core/Src/main.c ****   }
 245:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 248:Core/Src/main.c **** 
 249:Core/Src/main.c **** }
 522              		.loc 1 249 1
 523 0090 00BF     		nop
 524 0092 1037     		adds	r7, r7, #16
 525              	.LCFI10:
 526              		.cfi_def_cfa_offset 8
 527 0094 BD46     		mov	sp, r7
 528              	.LCFI11:
 529              		.cfi_def_cfa_register 13
 530              		@ sp needed
 531 0096 80BD     		pop	{r7, pc}
 532              	.L16:
 533              		.align	2
 534              	.L15:
 535 0098 00000000 		.word	hadc1
 536 009c 00200140 		.word	1073815552
 537 00a0 0100000F 		.word	251658241
 538              		.cfi_endproc
 539              	.LFE226:
 541              		.section	.text.MX_TIM3_Init,"ax",%progbits
 542              		.align	1
 543              		.syntax unified
 544              		.thumb
 545              		.thumb_func
 547              	MX_TIM3_Init:
 548              	.LFB227:
 250:Core/Src/main.c **** 
 251:Core/Src/main.c **** /**
 252:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 253:Core/Src/main.c ****   * @param None
 254:Core/Src/main.c ****   * @retval None
 255:Core/Src/main.c ****   */
 256:Core/Src/main.c **** static void MX_TIM3_Init(void)
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 15


 257:Core/Src/main.c **** {
 549              		.loc 1 257 1
 550              		.cfi_startproc
 551              		@ args = 0, pretend = 0, frame = 40
 552              		@ frame_needed = 1, uses_anonymous_args = 0
 553 0000 80B5     		push	{r7, lr}
 554              	.LCFI12:
 555              		.cfi_def_cfa_offset 8
 556              		.cfi_offset 7, -8
 557              		.cfi_offset 14, -4
 558 0002 8AB0     		sub	sp, sp, #40
 559              	.LCFI13:
 560              		.cfi_def_cfa_offset 48
 561 0004 00AF     		add	r7, sp, #0
 562              	.LCFI14:
 563              		.cfi_def_cfa_register 7
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 564              		.loc 1 263 27
 565 0006 07F12003 		add	r3, r7, #32
 566 000a 0022     		movs	r2, #0
 567 000c 1A60     		str	r2, [r3]
 568 000e 5A60     		str	r2, [r3, #4]
 264:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 569              		.loc 1 264 22
 570 0010 3B1D     		adds	r3, r7, #4
 571 0012 0022     		movs	r2, #0
 572 0014 1A60     		str	r2, [r3]
 573 0016 5A60     		str	r2, [r3, #4]
 574 0018 9A60     		str	r2, [r3, #8]
 575 001a DA60     		str	r2, [r3, #12]
 576 001c 1A61     		str	r2, [r3, #16]
 577 001e 5A61     		str	r2, [r3, #20]
 578 0020 9A61     		str	r2, [r3, #24]
 265:Core/Src/main.c **** 
 266:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 267:Core/Src/main.c **** 
 268:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 269:Core/Src/main.c ****   htim3.Instance = TIM3;
 579              		.loc 1 269 18
 580 0022 234B     		ldr	r3, .L21
 581 0024 234A     		ldr	r2, .L21+4
 582 0026 1A60     		str	r2, [r3]
 270:Core/Src/main.c ****   htim3.Init.Prescaler = 9600-1;
 583              		.loc 1 270 24
 584 0028 214B     		ldr	r3, .L21
 585 002a 42F27F52 		movw	r2, #9599
 586 002e 5A60     		str	r2, [r3, #4]
 271:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 587              		.loc 1 271 26
 588 0030 1F4B     		ldr	r3, .L21
 589 0032 0022     		movs	r2, #0
 590 0034 9A60     		str	r2, [r3, #8]
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 16


 272:Core/Src/main.c ****   htim3.Init.Period = 1250;
 591              		.loc 1 272 21
 592 0036 1E4B     		ldr	r3, .L21
 593 0038 40F2E242 		movw	r2, #1250
 594 003c DA60     		str	r2, [r3, #12]
 273:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 595              		.loc 1 273 28
 596 003e 1C4B     		ldr	r3, .L21
 597 0040 0022     		movs	r2, #0
 598 0042 1A61     		str	r2, [r3, #16]
 274:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 599              		.loc 1 274 32
 600 0044 1A4B     		ldr	r3, .L21
 601 0046 0022     		movs	r2, #0
 602 0048 9A61     		str	r2, [r3, #24]
 275:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 603              		.loc 1 275 7
 604 004a 1948     		ldr	r0, .L21
 605 004c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 606 0050 0346     		mov	r3, r0
 607              		.loc 1 275 6
 608 0052 002B     		cmp	r3, #0
 609 0054 01D0     		beq	.L18
 276:Core/Src/main.c ****   {
 277:Core/Src/main.c ****     Error_Handler();
 610              		.loc 1 277 5
 611 0056 FFF7FEFF 		bl	Error_Handler
 612              	.L18:
 278:Core/Src/main.c ****   }
 279:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 613              		.loc 1 279 37
 614 005a 0023     		movs	r3, #0
 615 005c 3B62     		str	r3, [r7, #32]
 280:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 616              		.loc 1 280 33
 617 005e 0023     		movs	r3, #0
 618 0060 7B62     		str	r3, [r7, #36]
 281:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 619              		.loc 1 281 7
 620 0062 07F12003 		add	r3, r7, #32
 621 0066 1946     		mov	r1, r3
 622 0068 1148     		ldr	r0, .L21
 623 006a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 624 006e 0346     		mov	r3, r0
 625              		.loc 1 281 6
 626 0070 002B     		cmp	r3, #0
 627 0072 01D0     		beq	.L19
 282:Core/Src/main.c ****   {
 283:Core/Src/main.c ****     Error_Handler();
 628              		.loc 1 283 5
 629 0074 FFF7FEFF 		bl	Error_Handler
 630              	.L19:
 284:Core/Src/main.c ****   }
 285:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 631              		.loc 1 285 20
 632 0078 6023     		movs	r3, #96
 633 007a 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 17


 286:Core/Src/main.c ****   sConfigOC.Pulse = 1250;
 634              		.loc 1 286 19
 635 007c 40F2E243 		movw	r3, #1250
 636 0080 BB60     		str	r3, [r7, #8]
 287:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 637              		.loc 1 287 24
 638 0082 0023     		movs	r3, #0
 639 0084 FB60     		str	r3, [r7, #12]
 288:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 640              		.loc 1 288 24
 641 0086 0023     		movs	r3, #0
 642 0088 7B61     		str	r3, [r7, #20]
 289:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 643              		.loc 1 289 7
 644 008a 3B1D     		adds	r3, r7, #4
 645 008c 0022     		movs	r2, #0
 646 008e 1946     		mov	r1, r3
 647 0090 0748     		ldr	r0, .L21
 648 0092 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 649 0096 0346     		mov	r3, r0
 650              		.loc 1 289 6
 651 0098 002B     		cmp	r3, #0
 652 009a 01D0     		beq	.L20
 290:Core/Src/main.c ****   {
 291:Core/Src/main.c ****     Error_Handler();
 653              		.loc 1 291 5
 654 009c FFF7FEFF 		bl	Error_Handler
 655              	.L20:
 292:Core/Src/main.c ****   }
 293:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 294:Core/Src/main.c **** 
 295:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 296:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim3);
 656              		.loc 1 296 3
 657 00a0 0348     		ldr	r0, .L21
 658 00a2 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 297:Core/Src/main.c **** 
 298:Core/Src/main.c **** }
 659              		.loc 1 298 1
 660 00a6 00BF     		nop
 661 00a8 2837     		adds	r7, r7, #40
 662              	.LCFI15:
 663              		.cfi_def_cfa_offset 8
 664 00aa BD46     		mov	sp, r7
 665              	.LCFI16:
 666              		.cfi_def_cfa_register 13
 667              		@ sp needed
 668 00ac 80BD     		pop	{r7, pc}
 669              	.L22:
 670 00ae 00BF     		.align	2
 671              	.L21:
 672 00b0 00000000 		.word	htim3
 673 00b4 00040040 		.word	1073742848
 674              		.cfi_endproc
 675              	.LFE227:
 677              		.section	.text.MX_TIM4_Init,"ax",%progbits
 678              		.align	1
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 18


 679              		.syntax unified
 680              		.thumb
 681              		.thumb_func
 683              	MX_TIM4_Init:
 684              	.LFB228:
 299:Core/Src/main.c **** 
 300:Core/Src/main.c **** /**
 301:Core/Src/main.c ****   * @brief TIM4 Initialization Function
 302:Core/Src/main.c ****   * @param None
 303:Core/Src/main.c ****   * @retval None
 304:Core/Src/main.c ****   */
 305:Core/Src/main.c **** static void MX_TIM4_Init(void)
 306:Core/Src/main.c **** {
 685              		.loc 1 306 1
 686              		.cfi_startproc
 687              		@ args = 0, pretend = 0, frame = 24
 688              		@ frame_needed = 1, uses_anonymous_args = 0
 689 0000 80B5     		push	{r7, lr}
 690              	.LCFI17:
 691              		.cfi_def_cfa_offset 8
 692              		.cfi_offset 7, -8
 693              		.cfi_offset 14, -4
 694 0002 86B0     		sub	sp, sp, #24
 695              	.LCFI18:
 696              		.cfi_def_cfa_offset 32
 697 0004 00AF     		add	r7, sp, #0
 698              	.LCFI19:
 699              		.cfi_def_cfa_register 7
 307:Core/Src/main.c **** 
 308:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 0 */
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   /* USER CODE END TIM4_Init 0 */
 311:Core/Src/main.c **** 
 312:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 700              		.loc 1 312 26
 701 0006 07F10803 		add	r3, r7, #8
 702 000a 0022     		movs	r2, #0
 703 000c 1A60     		str	r2, [r3]
 704 000e 5A60     		str	r2, [r3, #4]
 705 0010 9A60     		str	r2, [r3, #8]
 706 0012 DA60     		str	r2, [r3, #12]
 313:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 707              		.loc 1 313 27
 708 0014 3B46     		mov	r3, r7
 709 0016 0022     		movs	r2, #0
 710 0018 1A60     		str	r2, [r3]
 711 001a 5A60     		str	r2, [r3, #4]
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 1 */
 316:Core/Src/main.c **** 
 317:Core/Src/main.c ****   /* USER CODE END TIM4_Init 1 */
 318:Core/Src/main.c ****   htim4.Instance = TIM4;
 712              		.loc 1 318 18
 713 001c 1D4B     		ldr	r3, .L28
 714 001e 1E4A     		ldr	r2, .L28+4
 715 0020 1A60     		str	r2, [r3]
 319:Core/Src/main.c ****   htim4.Init.Prescaler = 9600-1;
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 19


 716              		.loc 1 319 24
 717 0022 1C4B     		ldr	r3, .L28
 718 0024 42F27F52 		movw	r2, #9599
 719 0028 5A60     		str	r2, [r3, #4]
 320:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 720              		.loc 1 320 26
 721 002a 1A4B     		ldr	r3, .L28
 722 002c 0022     		movs	r2, #0
 723 002e 9A60     		str	r2, [r3, #8]
 321:Core/Src/main.c ****   htim4.Init.Period = 500;
 724              		.loc 1 321 21
 725 0030 184B     		ldr	r3, .L28
 726 0032 4FF4FA72 		mov	r2, #500
 727 0036 DA60     		str	r2, [r3, #12]
 322:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 728              		.loc 1 322 28
 729 0038 164B     		ldr	r3, .L28
 730 003a 0022     		movs	r2, #0
 731 003c 1A61     		str	r2, [r3, #16]
 323:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 732              		.loc 1 323 32
 733 003e 154B     		ldr	r3, .L28
 734 0040 0022     		movs	r2, #0
 735 0042 9A61     		str	r2, [r3, #24]
 324:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 736              		.loc 1 324 7
 737 0044 1348     		ldr	r0, .L28
 738 0046 FFF7FEFF 		bl	HAL_TIM_Base_Init
 739 004a 0346     		mov	r3, r0
 740              		.loc 1 324 6
 741 004c 002B     		cmp	r3, #0
 742 004e 01D0     		beq	.L24
 325:Core/Src/main.c ****   {
 326:Core/Src/main.c ****     Error_Handler();
 743              		.loc 1 326 5
 744 0050 FFF7FEFF 		bl	Error_Handler
 745              	.L24:
 327:Core/Src/main.c ****   }
 328:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 746              		.loc 1 328 34
 747 0054 4FF48053 		mov	r3, #4096
 748 0058 BB60     		str	r3, [r7, #8]
 329:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 749              		.loc 1 329 7
 750 005a 07F10803 		add	r3, r7, #8
 751 005e 1946     		mov	r1, r3
 752 0060 0C48     		ldr	r0, .L28
 753 0062 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 754 0066 0346     		mov	r3, r0
 755              		.loc 1 329 6
 756 0068 002B     		cmp	r3, #0
 757 006a 01D0     		beq	.L25
 330:Core/Src/main.c ****   {
 331:Core/Src/main.c ****     Error_Handler();
 758              		.loc 1 331 5
 759 006c FFF7FEFF 		bl	Error_Handler
 760              	.L25:
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 20


 332:Core/Src/main.c ****   }
 333:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 761              		.loc 1 333 37
 762 0070 0023     		movs	r3, #0
 763 0072 3B60     		str	r3, [r7]
 334:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 764              		.loc 1 334 33
 765 0074 0023     		movs	r3, #0
 766 0076 7B60     		str	r3, [r7, #4]
 335:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 767              		.loc 1 335 7
 768 0078 3B46     		mov	r3, r7
 769 007a 1946     		mov	r1, r3
 770 007c 0548     		ldr	r0, .L28
 771 007e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 772 0082 0346     		mov	r3, r0
 773              		.loc 1 335 6
 774 0084 002B     		cmp	r3, #0
 775 0086 01D0     		beq	.L27
 336:Core/Src/main.c ****   {
 337:Core/Src/main.c ****     Error_Handler();
 776              		.loc 1 337 5
 777 0088 FFF7FEFF 		bl	Error_Handler
 778              	.L27:
 338:Core/Src/main.c ****   }
 339:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 2 */
 340:Core/Src/main.c **** 
 341:Core/Src/main.c ****   /* USER CODE END TIM4_Init 2 */
 342:Core/Src/main.c **** 
 343:Core/Src/main.c **** }
 779              		.loc 1 343 1
 780 008c 00BF     		nop
 781 008e 1837     		adds	r7, r7, #24
 782              	.LCFI20:
 783              		.cfi_def_cfa_offset 8
 784 0090 BD46     		mov	sp, r7
 785              	.LCFI21:
 786              		.cfi_def_cfa_register 13
 787              		@ sp needed
 788 0092 80BD     		pop	{r7, pc}
 789              	.L29:
 790              		.align	2
 791              	.L28:
 792 0094 00000000 		.word	htim4
 793 0098 00080040 		.word	1073743872
 794              		.cfi_endproc
 795              	.LFE228:
 797              		.section	.text.MX_GPIO_Init,"ax",%progbits
 798              		.align	1
 799              		.syntax unified
 800              		.thumb
 801              		.thumb_func
 803              	MX_GPIO_Init:
 804              	.LFB229:
 344:Core/Src/main.c **** 
 345:Core/Src/main.c **** /**
 346:Core/Src/main.c ****   * @brief GPIO Initialization Function
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 21


 347:Core/Src/main.c ****   * @param None
 348:Core/Src/main.c ****   * @retval None
 349:Core/Src/main.c ****   */
 350:Core/Src/main.c **** static void MX_GPIO_Init(void)
 351:Core/Src/main.c **** {
 805              		.loc 1 351 1
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 40
 808              		@ frame_needed = 1, uses_anonymous_args = 0
 809 0000 80B5     		push	{r7, lr}
 810              	.LCFI22:
 811              		.cfi_def_cfa_offset 8
 812              		.cfi_offset 7, -8
 813              		.cfi_offset 14, -4
 814 0002 8AB0     		sub	sp, sp, #40
 815              	.LCFI23:
 816              		.cfi_def_cfa_offset 48
 817 0004 00AF     		add	r7, sp, #0
 818              	.LCFI24:
 819              		.cfi_def_cfa_register 7
 352:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 820              		.loc 1 352 20
 821 0006 07F11403 		add	r3, r7, #20
 822 000a 0022     		movs	r2, #0
 823 000c 1A60     		str	r2, [r3]
 824 000e 5A60     		str	r2, [r3, #4]
 825 0010 9A60     		str	r2, [r3, #8]
 826 0012 DA60     		str	r2, [r3, #12]
 827 0014 1A61     		str	r2, [r3, #16]
 828              	.LBB7:
 353:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 354:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 355:Core/Src/main.c **** 
 356:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 357:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 829              		.loc 1 357 3
 830 0016 0023     		movs	r3, #0
 831 0018 3B61     		str	r3, [r7, #16]
 832 001a 374B     		ldr	r3, .L31
 833 001c 1B6B     		ldr	r3, [r3, #48]
 834 001e 364A     		ldr	r2, .L31
 835 0020 43F00403 		orr	r3, r3, #4
 836 0024 1363     		str	r3, [r2, #48]
 837 0026 344B     		ldr	r3, .L31
 838 0028 1B6B     		ldr	r3, [r3, #48]
 839 002a 03F00403 		and	r3, r3, #4
 840 002e 3B61     		str	r3, [r7, #16]
 841 0030 3B69     		ldr	r3, [r7, #16]
 842              	.LBE7:
 843              	.LBB8:
 358:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 844              		.loc 1 358 3
 845 0032 0023     		movs	r3, #0
 846 0034 FB60     		str	r3, [r7, #12]
 847 0036 304B     		ldr	r3, .L31
 848 0038 1B6B     		ldr	r3, [r3, #48]
 849 003a 2F4A     		ldr	r2, .L31
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 22


 850 003c 43F08003 		orr	r3, r3, #128
 851 0040 1363     		str	r3, [r2, #48]
 852 0042 2D4B     		ldr	r3, .L31
 853 0044 1B6B     		ldr	r3, [r3, #48]
 854 0046 03F08003 		and	r3, r3, #128
 855 004a FB60     		str	r3, [r7, #12]
 856 004c FB68     		ldr	r3, [r7, #12]
 857              	.LBE8:
 858              	.LBB9:
 359:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 859              		.loc 1 359 3
 860 004e 0023     		movs	r3, #0
 861 0050 BB60     		str	r3, [r7, #8]
 862 0052 294B     		ldr	r3, .L31
 863 0054 1B6B     		ldr	r3, [r3, #48]
 864 0056 284A     		ldr	r2, .L31
 865 0058 43F00103 		orr	r3, r3, #1
 866 005c 1363     		str	r3, [r2, #48]
 867 005e 264B     		ldr	r3, .L31
 868 0060 1B6B     		ldr	r3, [r3, #48]
 869 0062 03F00103 		and	r3, r3, #1
 870 0066 BB60     		str	r3, [r7, #8]
 871 0068 BB68     		ldr	r3, [r7, #8]
 872              	.LBE9:
 873              	.LBB10:
 360:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 874              		.loc 1 360 3
 875 006a 0023     		movs	r3, #0
 876 006c 7B60     		str	r3, [r7, #4]
 877 006e 224B     		ldr	r3, .L31
 878 0070 1B6B     		ldr	r3, [r3, #48]
 879 0072 214A     		ldr	r2, .L31
 880 0074 43F00203 		orr	r3, r3, #2
 881 0078 1363     		str	r3, [r2, #48]
 882 007a 1F4B     		ldr	r3, .L31
 883 007c 1B6B     		ldr	r3, [r3, #48]
 884 007e 03F00203 		and	r3, r3, #2
 885 0082 7B60     		str	r3, [r7, #4]
 886 0084 7B68     		ldr	r3, [r7, #4]
 887              	.LBE10:
 361:Core/Src/main.c **** 
 362:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 363:Core/Src/main.c ****   HAL_GPIO_WritePin(KIT_LED_GPIO_Port, KIT_LED_Pin, GPIO_PIN_RESET);
 888              		.loc 1 363 3
 889 0086 0022     		movs	r2, #0
 890 0088 4FF40051 		mov	r1, #8192
 891 008c 1B48     		ldr	r0, .L31+4
 892 008e FFF7FEFF 		bl	HAL_GPIO_WritePin
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 366:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 893              		.loc 1 366 3
 894 0092 0022     		movs	r2, #0
 895 0094 F821     		movs	r1, #248
 896 0096 1A48     		ldr	r0, .L31+8
 897 0098 FFF7FEFF 		bl	HAL_GPIO_WritePin
 367:Core/Src/main.c ****                           |LED5_Pin, GPIO_PIN_RESET);
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 23


 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****   /*Configure GPIO pin : KIT_LED_Pin */
 370:Core/Src/main.c ****   GPIO_InitStruct.Pin = KIT_LED_Pin;
 898              		.loc 1 370 23
 899 009c 4FF40053 		mov	r3, #8192
 900 00a0 7B61     		str	r3, [r7, #20]
 371:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 901              		.loc 1 371 24
 902 00a2 0123     		movs	r3, #1
 903 00a4 BB61     		str	r3, [r7, #24]
 372:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 904              		.loc 1 372 24
 905 00a6 0023     		movs	r3, #0
 906 00a8 FB61     		str	r3, [r7, #28]
 373:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 907              		.loc 1 373 25
 908 00aa 0023     		movs	r3, #0
 909 00ac 3B62     		str	r3, [r7, #32]
 374:Core/Src/main.c ****   HAL_GPIO_Init(KIT_LED_GPIO_Port, &GPIO_InitStruct);
 910              		.loc 1 374 3
 911 00ae 07F11403 		add	r3, r7, #20
 912 00b2 1946     		mov	r1, r3
 913 00b4 1148     		ldr	r0, .L31+4
 914 00b6 FFF7FEFF 		bl	HAL_GPIO_Init
 375:Core/Src/main.c **** 
 376:Core/Src/main.c ****   /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
 377:Core/Src/main.c ****                            LED5_Pin */
 378:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 915              		.loc 1 378 23
 916 00ba F823     		movs	r3, #248
 917 00bc 7B61     		str	r3, [r7, #20]
 379:Core/Src/main.c ****                           |LED5_Pin;
 380:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 918              		.loc 1 380 24
 919 00be 0123     		movs	r3, #1
 920 00c0 BB61     		str	r3, [r7, #24]
 381:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 921              		.loc 1 381 24
 922 00c2 0023     		movs	r3, #0
 923 00c4 FB61     		str	r3, [r7, #28]
 382:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 924              		.loc 1 382 25
 925 00c6 0023     		movs	r3, #0
 926 00c8 3B62     		str	r3, [r7, #32]
 383:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 927              		.loc 1 383 3
 928 00ca 07F11403 		add	r3, r7, #20
 929 00ce 1946     		mov	r1, r3
 930 00d0 0B48     		ldr	r0, .L31+8
 931 00d2 FFF7FEFF 		bl	HAL_GPIO_Init
 384:Core/Src/main.c **** 
 385:Core/Src/main.c ****   /*Configure GPIO pins : BTN2_Pin BTN1_Pin */
 386:Core/Src/main.c ****   GPIO_InitStruct.Pin = BTN2_Pin|BTN1_Pin;
 932              		.loc 1 386 23
 933 00d6 4FF41043 		mov	r3, #36864
 934 00da 7B61     		str	r3, [r7, #20]
 387:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 24


 935              		.loc 1 387 24
 936 00dc 0023     		movs	r3, #0
 937 00de BB61     		str	r3, [r7, #24]
 388:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 938              		.loc 1 388 24
 939 00e0 0023     		movs	r3, #0
 940 00e2 FB61     		str	r3, [r7, #28]
 389:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 941              		.loc 1 389 3
 942 00e4 07F11403 		add	r3, r7, #20
 943 00e8 1946     		mov	r1, r3
 944 00ea 0648     		ldr	r0, .L31+12
 945 00ec FFF7FEFF 		bl	HAL_GPIO_Init
 390:Core/Src/main.c **** 
 391:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 392:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 393:Core/Src/main.c **** }
 946              		.loc 1 393 1
 947 00f0 00BF     		nop
 948 00f2 2837     		adds	r7, r7, #40
 949              	.LCFI25:
 950              		.cfi_def_cfa_offset 8
 951 00f4 BD46     		mov	sp, r7
 952              	.LCFI26:
 953              		.cfi_def_cfa_register 13
 954              		@ sp needed
 955 00f6 80BD     		pop	{r7, pc}
 956              	.L32:
 957              		.align	2
 958              	.L31:
 959 00f8 00380240 		.word	1073887232
 960 00fc 00080240 		.word	1073874944
 961 0100 00000240 		.word	1073872896
 962 0104 00040240 		.word	1073873920
 963              		.cfi_endproc
 964              	.LFE229:
 966              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 967              		.align	1
 968              		.global	HAL_TIM_PeriodElapsedCallback
 969              		.syntax unified
 970              		.thumb
 971              		.thumb_func
 973              	HAL_TIM_PeriodElapsedCallback:
 974              	.LFB230:
 394:Core/Src/main.c **** 
 395:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 396:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 397:Core/Src/main.c **** {
 975              		.loc 1 397 1
 976              		.cfi_startproc
 977              		@ args = 0, pretend = 0, frame = 8
 978              		@ frame_needed = 1, uses_anonymous_args = 0
 979              		@ link register save eliminated.
 980 0000 80B4     		push	{r7}
 981              	.LCFI27:
 982              		.cfi_def_cfa_offset 4
 983              		.cfi_offset 7, -4
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 25


 984 0002 83B0     		sub	sp, sp, #12
 985              	.LCFI28:
 986              		.cfi_def_cfa_offset 16
 987 0004 00AF     		add	r7, sp, #0
 988              	.LCFI29:
 989              		.cfi_def_cfa_register 7
 990 0006 7860     		str	r0, [r7, #4]
 398:Core/Src/main.c **** }
 991              		.loc 1 398 1
 992 0008 00BF     		nop
 993 000a 0C37     		adds	r7, r7, #12
 994              	.LCFI30:
 995              		.cfi_def_cfa_offset 4
 996 000c BD46     		mov	sp, r7
 997              	.LCFI31:
 998              		.cfi_def_cfa_register 13
 999              		@ sp needed
 1000 000e 5DF8047B 		ldr	r7, [sp], #4
 1001              	.LCFI32:
 1002              		.cfi_restore 7
 1003              		.cfi_def_cfa_offset 0
 1004 0012 7047     		bx	lr
 1005              		.cfi_endproc
 1006              	.LFE230:
 1008              		.section	.text.Error_Handler,"ax",%progbits
 1009              		.align	1
 1010              		.global	Error_Handler
 1011              		.syntax unified
 1012              		.thumb
 1013              		.thumb_func
 1015              	Error_Handler:
 1016              	.LFB231:
 399:Core/Src/main.c **** 
 400:Core/Src/main.c **** /* USER CODE END 4 */
 401:Core/Src/main.c **** 
 402:Core/Src/main.c **** /**
 403:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 404:Core/Src/main.c ****   * @retval None
 405:Core/Src/main.c ****   */
 406:Core/Src/main.c **** void Error_Handler(void)
 407:Core/Src/main.c **** {
 1017              		.loc 1 407 1
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 1, uses_anonymous_args = 0
 1021              		@ link register save eliminated.
 1022 0000 80B4     		push	{r7}
 1023              	.LCFI33:
 1024              		.cfi_def_cfa_offset 4
 1025              		.cfi_offset 7, -4
 1026 0002 00AF     		add	r7, sp, #0
 1027              	.LCFI34:
 1028              		.cfi_def_cfa_register 7
 1029              	.LBB11:
 1030              	.LBB12:
 1031              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 26


   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 27


  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 28


 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 29


 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 30


 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 31


 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 32


 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 33


 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 34


 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 35


 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 36


 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 37


 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 38


 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 39


 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 40


 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 41


 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 42


 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1032              		.loc 2 962 3
 1033              		.syntax unified
 1034              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1035 0004 72B6     		cpsid i
 1036              	@ 0 "" 2
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1037              		.loc 2 963 1
 1038              		.thumb
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 43


 1039              		.syntax unified
 1040 0006 00BF     		nop
 1041              	.L35:
 1042              	.LBE12:
 1043              	.LBE11:
 408:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 409:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 410:Core/Src/main.c ****   __disable_irq();
 411:Core/Src/main.c ****   while (1)
 1044              		.loc 1 411 9 discriminator 1
 1045 0008 FEE7     		b	.L35
 1046              		.cfi_endproc
 1047              	.LFE231:
 1049              		.text
 1050              	.Letext0:
 1051              		.file 3 "c:\\arm-gcc\\tools\\tools\\arm-gnu-toolchain-11.3.rel1-mingw-w64-i686-arm-none-eabi\\arm-
 1052              		.file 4 "c:\\arm-gcc\\tools\\tools\\arm-gnu-toolchain-11.3.rel1-mingw-w64-i686-arm-none-eabi\\arm-
 1053              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1054              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1055              		.file 7 "c:\\arm-gcc\\tools\\tools\\arm-gnu-toolchain-11.3.rel1-mingw-w64-i686-arm-none-eabi\\lib\
 1056              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1057              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1058              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1059              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1060              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1061              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1062              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1063              		.file 15 "Core/Inc/main.h"
 1064              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1065              		.file 17 "c:\\arm-gcc\\tools\\tools\\arm-gnu-toolchain-11.3.rel1-mingw-w64-i686-arm-none-eabi\\arm
 1066              		.file 18 "c:\\arm-gcc\\tools\\tools\\arm-gnu-toolchain-11.3.rel1-mingw-w64-i686-arm-none-eabi\\arm
 1067              		.file 19 "USB_DEVICE/App/usb_device.h"
 1068              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 44


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:24     .bss.hadc1:00000000 hadc1
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:21     .bss.hadc1:00000000 $d
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:31     .bss.htim3:00000000 htim3
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:28     .bss.htim3:00000000 $d
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:38     .bss.htim4:00000000 htim4
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:35     .bss.htim4:00000000 $d
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:45     .bss.read:00000000 read
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:42     .bss.read:00000000 $d
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:52     .bss.gCont:00000000 gCont
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:49     .bss.gCont:00000000 $d
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:59     .bss.gLeds:00000000 gLeds
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:56     .bss.gLeds:00000000 $d
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:66     .rodata.min_read:00000000 min_read
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:63     .rodata.min_read:00000000 $d
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:73     .rodata.max_read:00000000 max_read
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:70     .rodata.max_read:00000000 $d
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:80     .bss.buffer:00000000 buffer
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:77     .bss.buffer:00000000 $d
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:87     .bss.count:00000000 count
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:84     .bss.count:00000000 $d
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:90     .rodata:00000000 $d
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:94     .text.main:00000000 $t
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:100    .text.main:00000000 main
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:272    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:803    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:683    .text.MX_TIM4_Init:00000000 MX_TIM4_Init
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:419    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:547    .text.MX_TIM3_Init:00000000 MX_TIM3_Init
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:251    .text.main:00000114 $d
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:266    .text.SystemClock_Config:00000000 $t
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:1015   .text.Error_Handler:00000000 Error_Handler
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:408    .text.SystemClock_Config:000000c8 $d
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:414    .text.MX_ADC1_Init:00000000 $t
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:535    .text.MX_ADC1_Init:00000098 $d
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:542    .text.MX_TIM3_Init:00000000 $t
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:672    .text.MX_TIM3_Init:000000b0 $d
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:678    .text.MX_TIM4_Init:00000000 $t
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:792    .text.MX_TIM4_Init:00000094 $d
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:798    .text.MX_GPIO_Init:00000000 $t
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:959    .text.MX_GPIO_Init:000000f8 $d
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:967    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:973    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
C:\Users\natal\AppData\Local\Temp\cctAZP7d.s:1009   .text.Error_Handler:00000000 $t

UNDEFINED SYMBOLS
HAL_Init
MX_USB_DEVICE_Init
HAL_TIM_PWM_Start
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_GPIO_WritePin
Hal_Delay
sprintf
strlen
ARM GAS  C:\Users\natal\AppData\Local\Temp\cctAZP7d.s 			page 45


CDC_Transmit_FS
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_GPIO_Init
