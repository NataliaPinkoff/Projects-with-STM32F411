ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	hadc1
  20              		.section	.bss.hadc1,"aw",%nobits
  21              		.align	2
  24              	hadc1:
  25 0000 00000000 		.space	72
  25      00000000 
  25      00000000 
  25      00000000 
  25      00000000 
  26              		.global	htim3
  27              		.section	.bss.htim3,"aw",%nobits
  28              		.align	2
  31              	htim3:
  32 0000 00000000 		.space	72
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.global	htim4
  34              		.section	.bss.htim4,"aw",%nobits
  35              		.align	2
  38              	htim4:
  39 0000 00000000 		.space	72
  39      00000000 
  39      00000000 
  39      00000000 
  39      00000000 
  40              		.global	read
  41              		.section	.bss.read,"aw",%nobits
  42              		.align	1
  45              	read:
  46 0000 0000     		.space	2
  47              		.global	read_original
  48              		.section	.bss.read_original,"aw",%nobits
  49              		.align	1
  52              	read_original:
  53 0000 0000     		.space	2
  54              		.global	buffer
  55              		.section	.bss.buffer,"aw",%nobits
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 2


  56              		.align	2
  59              	buffer:
  60 0000 00000000 		.space	255
  60      00000000 
  60      00000000 
  60      00000000 
  60      00000000 
  61              		.global	gUSBRxBuffer
  62              		.section	.bss.gUSBRxBuffer,"aw",%nobits
  63              		.align	2
  66              	gUSBRxBuffer:
  67 0000 00000000 		.space	255
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              		.global	DC
  69              		.section	.bss.DC,"aw",%nobits
  70              		.align	2
  73              	DC:
  74 0000 00000000 		.space	4
  75              		.global	__aeabi_i2d
  76              		.global	__aeabi_dmul
  77              		.global	__aeabi_ddiv
  78              		.global	__aeabi_d2iz
  79              		.global	__aeabi_dsub
  80              		.section	.rodata
  81              		.align	2
  82              	.LC0:
  83 0000 4F207065 		.ascii	"O percentual do fundo de escala do A/D eh de %d.%03"
  83      7263656E 
  83      7475616C 
  83      20646F20 
  83      66756E64 
  84 0033 6425252C 		.ascii	"d%%, representando uma tensao de %d mV\015\012\000"
  84      20726570 
  84      72657365 
  84      6E74616E 
  84      646F2075 
  85              		.align	2
  86              	.LC1:
  87 005c 4F206475 		.ascii	"O duty cycle atual do PWM eh %d.%03d\015\012\000"
  87      74792063 
  87      79636C65 
  87      20617475 
  87      616C2064 
  88 0083 00       		.align	2
  89              	.LC2:
  90 0084 4E616F20 		.ascii	"Nao reconheci o comando\015\012\000"
  90      7265636F 
  90      6E686563 
  90      69206F20 
  90      636F6D61 
  91              		.section	.text.main,"ax",%progbits
  92              		.align	1
  93              		.global	main
  94              		.syntax unified
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 3


  95              		.thumb
  96              		.thumb_func
  98              	main:
  99              	.LFB224:
 100              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****  ******************************************************************************
   4:Core/Src/main.c ****  * @file           : main.c
   5:Core/Src/main.c ****  * @brief          : Main program body
   6:Core/Src/main.c ****  ******************************************************************************
   7:Core/Src/main.c ****  * @attention
   8:Core/Src/main.c ****  *
   9:Core/Src/main.c ****  * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****  * All rights reserved.
  11:Core/Src/main.c ****  *
  12:Core/Src/main.c ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****  * in the root directory of this software component.
  14:Core/Src/main.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****  *
  16:Core/Src/main.c ****  ******************************************************************************
  17:Core/Src/main.c ****  */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "usb_device.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include "button.h"
  26:Core/Src/main.c **** #include "usbd_cdc_if.h"
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  47:Core/Src/main.c **** TIM_HandleTypeDef htim4;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE BEGIN PV */
  50:Core/Src/main.c **** uint16_t read;  //vari√°vel para leitura do ADC no TIM3 Interrupt
  51:Core/Src/main.c **** uint16_t read_original;
  52:Core/Src/main.c **** uint8_t buffer[255];
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 4


  53:Core/Src/main.c **** uint8_t gUSBRxBuffer[255];
  54:Core/Src/main.c **** int DC = 0;
  55:Core/Src/main.c **** /* USER CODE END PV */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  58:Core/Src/main.c **** void SystemClock_Config(void);
  59:Core/Src/main.c **** static void MX_GPIO_Init(void);
  60:Core/Src/main.c **** static void MX_TIM4_Init(void);
  61:Core/Src/main.c **** static void MX_TIM3_Init(void);
  62:Core/Src/main.c **** static void MX_ADC1_Init(void);
  63:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /* USER CODE END PFP */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  68:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* USER CODE END 0 */
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** /**
  73:Core/Src/main.c ****   * @brief  The application entry point.
  74:Core/Src/main.c ****   * @retval int
  75:Core/Src/main.c ****   */
  76:Core/Src/main.c **** int main(void)
  77:Core/Src/main.c **** {
 101              		.loc 1 77 1
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 1, uses_anonymous_args = 0
 105 0000 2DE99043 		push	{r4, r7, r8, r9, lr}
 106              	.LCFI0:
 107              		.cfi_def_cfa_offset 20
 108              		.cfi_offset 4, -20
 109              		.cfi_offset 7, -16
 110              		.cfi_offset 8, -12
 111              		.cfi_offset 9, -8
 112              		.cfi_offset 14, -4
 113 0004 83B0     		sub	sp, sp, #12
 114              	.LCFI1:
 115              		.cfi_def_cfa_offset 32
 116 0006 02AF     		add	r7, sp, #8
 117              	.LCFI2:
 118              		.cfi_def_cfa 7, 24
  78:Core/Src/main.c **** 
  79:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c ****   /* USER CODE END 1 */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  86:Core/Src/main.c ****    HAL_Init();
 119              		.loc 1 86 4
 120 0008 FFF7FEFF 		bl	HAL_Init
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  89:Core/Src/main.c ****   
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 5


  90:Core/Src/main.c ****   /* USER CODE END Init */
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* Configure the system clock */
  93:Core/Src/main.c ****   SystemClock_Config();
 121              		.loc 1 93 3
 122 000c FFF7FEFF 		bl	SystemClock_Config
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* USER CODE END SysInit */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* Initialize all configured peripherals */
 100:Core/Src/main.c ****   MX_GPIO_Init();
 123              		.loc 1 100 3
 124 0010 FFF7FEFF 		bl	MX_GPIO_Init
 101:Core/Src/main.c ****   MX_TIM4_Init();
 125              		.loc 1 101 3
 126 0014 FFF7FEFF 		bl	MX_TIM4_Init
 102:Core/Src/main.c ****   MX_TIM3_Init();
 127              		.loc 1 102 3
 128 0018 FFF7FEFF 		bl	MX_TIM3_Init
 103:Core/Src/main.c ****   MX_ADC1_Init();
 129              		.loc 1 103 3
 130 001c FFF7FEFF 		bl	MX_ADC1_Init
 104:Core/Src/main.c ****   MX_USB_DEVICE_Init();
 131              		.loc 1 104 3
 132 0020 FFF7FEFF 		bl	MX_USB_DEVICE_Init
 105:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 106:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim3);
 133              		.loc 1 106 3
 134 0024 9048     		ldr	r0, .L10+8
 135 0026 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 107:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 136              		.loc 1 107 3
 137 002a 0021     		movs	r1, #0
 138 002c 8F48     		ldr	r0, .L10+12
 139 002e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 140              	.L9:
 108:Core/Src/main.c ****   /* USER CODE END 2 */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* Infinite loop */
 111:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****     while (1)
 114:Core/Src/main.c ****   {         
 115:Core/Src/main.c ****       if(gUSBRxBuffer[0]!=0)
 141              		.loc 1 115 22
 142 0032 8F4B     		ldr	r3, .L10+16
 143 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 144              		.loc 1 115 9
 145 0036 002B     		cmp	r3, #0
 146 0038 FBD0     		beq	.L9
 116:Core/Src/main.c ****       {
 117:Core/Src/main.c ****         switch(gUSBRxBuffer[0])
 147              		.loc 1 117 28
 148 003a 8D4B     		ldr	r3, .L10+16
 149 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 6


 150              		.loc 1 117 9
 151 003e 732B     		cmp	r3, #115
 152 0040 00F08780 		beq	.L3
 153 0044 732B     		cmp	r3, #115
 154 0046 00F3F680 		bgt	.L4
 155 004a 642B     		cmp	r3, #100
 156 004c 00F0BB80 		beq	.L5
 157 0050 642B     		cmp	r3, #100
 158 0052 00F3F080 		bgt	.L4
 159 0056 252B     		cmp	r3, #37
 160 0058 02D0     		beq	.L6
 161 005a 502B     		cmp	r3, #80
 162 005c 40F0EB80 		bne	.L4
 163              	.L6:
 118:Core/Src/main.c ****         {
 119:Core/Src/main.c ****           case 80:    //"P" mai√∫sculo
 120:Core/Src/main.c ****           case 37:    //"%"
 121:Core/Src/main.c ****           { 
 122:Core/Src/main.c ****             sprintf(buffer, "O percentual do fundo de escala do A/D eh de %d.%03d%%, representando 
 164              		.loc 1 122 145
 165 0060 844B     		ldr	r3, .L10+20
 166 0062 1B88     		ldrh	r3, [r3]
 167 0064 1A46     		mov	r2, r3
 168 0066 6423     		movs	r3, #100
 169 0068 02FB03F3 		mul	r3, r2, r3
 170              		.loc 1 122 13
 171 006c 824A     		ldr	r2, .L10+24
 172 006e 82FB0312 		smull	r1, r2, r2, r3
 173 0072 1A44     		add	r2, r2, r3
 174 0074 D212     		asrs	r2, r2, #11
 175 0076 DB17     		asrs	r3, r3, #31
 176 0078 D41A     		subs	r4, r2, r3
 177              		.loc 1 122 179
 178 007a 7E4B     		ldr	r3, .L10+20
 179 007c 1B88     		ldrh	r3, [r3]
 180 007e 1846     		mov	r0, r3
 181 0080 FFF7FEFF 		bl	__aeabi_i2d
 182 0084 4FF00002 		mov	r2, #0
 183 0088 7C4B     		ldr	r3, .L10+28
 184 008a FFF7FEFF 		bl	__aeabi_dmul
 185 008e 0246     		mov	r2, r0
 186 0090 0B46     		mov	r3, r1
 187 0092 1046     		mov	r0, r2
 188 0094 1946     		mov	r1, r3
 189              		.loc 1 122 187
 190 0096 72A3     		adr	r3, .L10
 191 0098 D3E90023 		ldrd	r2, [r3]
 192 009c FFF7FEFF 		bl	__aeabi_ddiv
 193 00a0 0246     		mov	r2, r0
 194 00a2 0B46     		mov	r3, r1
 195 00a4 9046     		mov	r8, r2
 196 00a6 9946     		mov	r9, r3
 197              		.loc 1 122 216
 198 00a8 724B     		ldr	r3, .L10+20
 199 00aa 1B88     		ldrh	r3, [r3]
 200 00ac 1846     		mov	r0, r3
 201 00ae FFF7FEFF 		bl	__aeabi_i2d
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 7


 202 00b2 4FF00002 		mov	r2, #0
 203 00b6 714B     		ldr	r3, .L10+28
 204 00b8 FFF7FEFF 		bl	__aeabi_dmul
 205 00bc 0246     		mov	r2, r0
 206 00be 0B46     		mov	r3, r1
 207 00c0 1046     		mov	r0, r2
 208 00c2 1946     		mov	r1, r3
 209              		.loc 1 122 224
 210 00c4 66A3     		adr	r3, .L10
 211 00c6 D3E90023 		ldrd	r2, [r3]
 212 00ca FFF7FEFF 		bl	__aeabi_ddiv
 213 00ce 0246     		mov	r2, r0
 214 00d0 0B46     		mov	r3, r1
 215              		.loc 1 122 196
 216 00d2 1046     		mov	r0, r2
 217 00d4 1946     		mov	r1, r3
 218 00d6 FFF7FEFF 		bl	__aeabi_d2iz
 219 00da 0346     		mov	r3, r0
 220              		.loc 1 122 194
 221 00dc 1846     		mov	r0, r3
 222 00de FFF7FEFF 		bl	__aeabi_i2d
 223 00e2 0246     		mov	r2, r0
 224 00e4 0B46     		mov	r3, r1
 225 00e6 4046     		mov	r0, r8
 226 00e8 4946     		mov	r1, r9
 227 00ea FFF7FEFF 		bl	__aeabi_dsub
 228 00ee 0246     		mov	r2, r0
 229 00f0 0B46     		mov	r3, r1
 230 00f2 1046     		mov	r0, r2
 231 00f4 1946     		mov	r1, r3
 232              		.loc 1 122 233
 233 00f6 4FF00002 		mov	r2, #0
 234 00fa 614B     		ldr	r3, .L10+32
 235 00fc FFF7FEFF 		bl	__aeabi_dmul
 236 0100 0246     		mov	r2, r0
 237 0102 0B46     		mov	r3, r1
 238              		.loc 1 122 13
 239 0104 1046     		mov	r0, r2
 240 0106 1946     		mov	r1, r3
 241 0108 FFF7FEFF 		bl	__aeabi_d2iz
 242 010c 0146     		mov	r1, r0
 243              		.loc 1 122 255
 244 010e 594B     		ldr	r3, .L10+20
 245 0110 1B88     		ldrh	r3, [r3]
 246 0112 1A46     		mov	r2, r3
 247 0114 40F6E443 		movw	r3, #3300
 248 0118 02FB03F3 		mul	r3, r2, r3
 249              		.loc 1 122 13
 250 011c 564A     		ldr	r2, .L10+24
 251 011e 82FB0302 		smull	r0, r2, r2, r3
 252 0122 1A44     		add	r2, r2, r3
 253 0124 D212     		asrs	r2, r2, #11
 254 0126 DB17     		asrs	r3, r3, #31
 255 0128 D31A     		subs	r3, r2, r3
 256 012a 0093     		str	r3, [sp]
 257 012c 0B46     		mov	r3, r1
 258 012e 2246     		mov	r2, r4
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 8


 259 0130 5449     		ldr	r1, .L10+36
 260 0132 5548     		ldr	r0, .L10+40
 261 0134 FFF7FEFF 		bl	sprintf
 123:Core/Src/main.c ****             CDC_Transmit_FS(buffer, strlen(buffer));
 262              		.loc 1 123 37
 263 0138 5348     		ldr	r0, .L10+40
 264 013a FFF7FEFF 		bl	strlen
 265 013e 0346     		mov	r3, r0
 266              		.loc 1 123 13
 267 0140 9BB2     		uxth	r3, r3
 268 0142 1946     		mov	r1, r3
 269 0144 5048     		ldr	r0, .L10+40
 270 0146 FFF7FEFF 		bl	CDC_Transmit_FS
 124:Core/Src/main.c ****             gUSBRxBuffer[0]=0;
 271              		.loc 1 124 28
 272 014a 494B     		ldr	r3, .L10+16
 273 014c 0022     		movs	r2, #0
 274 014e 1A70     		strb	r2, [r3]
 125:Core/Src/main.c ****             break;
 275              		.loc 1 125 13
 276 0150 82E0     		b	.L2
 277              	.L3:
 126:Core/Src/main.c ****           }
 127:Core/Src/main.c ****           case 115:     //"s" min√∫sculo
 128:Core/Src/main.c ****           {
 129:Core/Src/main.c ****            if(DC <= 1000-63)
 278              		.loc 1 129 18
 279 0152 4E4B     		ldr	r3, .L10+44
 280 0154 1B68     		ldr	r3, [r3]
 281              		.loc 1 129 14
 282 0156 40F2A932 		movw	r2, #937
 283 015a 9342     		cmp	r3, r2
 284 015c 0BDC     		bgt	.L7
 130:Core/Src/main.c ****            {
 131:Core/Src/main.c ****             htim4.Instance->CCR1 = DC+63;  
 285              		.loc 1 131 38
 286 015e 4B4B     		ldr	r3, .L10+44
 287 0160 1B68     		ldr	r3, [r3]
 288 0162 03F13F02 		add	r2, r3, #63
 289              		.loc 1 131 18
 290 0166 414B     		ldr	r3, .L10+12
 291 0168 1B68     		ldr	r3, [r3]
 292              		.loc 1 131 34
 293 016a 5A63     		str	r2, [r3, #52]
 132:Core/Src/main.c ****             DC = DC+63;   
 294              		.loc 1 132 20
 295 016c 474B     		ldr	r3, .L10+44
 296 016e 1B68     		ldr	r3, [r3]
 297 0170 3F33     		adds	r3, r3, #63
 298              		.loc 1 132 16
 299 0172 464A     		ldr	r2, .L10+44
 300 0174 1360     		str	r3, [r2]
 301              	.L7:
 133:Core/Src/main.c ****            }
 134:Core/Src/main.c ****            sprintf(buffer, "O duty cycle atual do PWM eh %d.%03d\r\n", DC/1000, DC % 1000);
 302              		.loc 1 134 12
 303 0176 454B     		ldr	r3, .L10+44
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 9


 304 0178 1B68     		ldr	r3, [r3]
 305 017a 454A     		ldr	r2, .L10+48
 306 017c 82FB0312 		smull	r1, r2, r2, r3
 307 0180 9211     		asrs	r2, r2, #6
 308 0182 DB17     		asrs	r3, r3, #31
 309 0184 D01A     		subs	r0, r2, r3
 310 0186 414B     		ldr	r3, .L10+44
 311 0188 1B68     		ldr	r3, [r3]
 312 018a 414A     		ldr	r2, .L10+48
 313 018c 82FB0312 		smull	r1, r2, r2, r3
 314 0190 9111     		asrs	r1, r2, #6
 315 0192 DA17     		asrs	r2, r3, #31
 316 0194 8A1A     		subs	r2, r1, r2
 317 0196 4FF47A71 		mov	r1, #1000
 318 019a 01FB02F2 		mul	r2, r1, r2
 319 019e 9A1A     		subs	r2, r3, r2
 320 01a0 1346     		mov	r3, r2
 321 01a2 0246     		mov	r2, r0
 322 01a4 3B49     		ldr	r1, .L10+52
 323 01a6 3848     		ldr	r0, .L10+40
 324 01a8 FFF7FEFF 		bl	sprintf
 135:Core/Src/main.c ****            CDC_Transmit_FS(buffer, strlen(buffer));
 325              		.loc 1 135 36
 326 01ac 3648     		ldr	r0, .L10+40
 327 01ae FFF7FEFF 		bl	strlen
 328 01b2 0346     		mov	r3, r0
 329              		.loc 1 135 12
 330 01b4 9BB2     		uxth	r3, r3
 331 01b6 1946     		mov	r1, r3
 332 01b8 3348     		ldr	r0, .L10+40
 333 01ba FFF7FEFF 		bl	CDC_Transmit_FS
 136:Core/Src/main.c ****            gUSBRxBuffer[0]=0;
 334              		.loc 1 136 27
 335 01be 2C4B     		ldr	r3, .L10+16
 336 01c0 0022     		movs	r2, #0
 337 01c2 1A70     		strb	r2, [r3]
 137:Core/Src/main.c ****            break;
 338              		.loc 1 137 12
 339 01c4 48E0     		b	.L2
 340              	.L5:
 138:Core/Src/main.c ****           }
 139:Core/Src/main.c ****           case 100:     //"d" min√∫sculo
 140:Core/Src/main.c ****           {
 141:Core/Src/main.c ****             if(DC >= 63)
 341              		.loc 1 141 19
 342 01c6 314B     		ldr	r3, .L10+44
 343 01c8 1B68     		ldr	r3, [r3]
 344              		.loc 1 141 15
 345 01ca 3E2B     		cmp	r3, #62
 346 01cc 0BDD     		ble	.L8
 142:Core/Src/main.c ****             {
 143:Core/Src/main.c ****             htim4.Instance->CCR1 = DC-63;
 347              		.loc 1 143 38
 348 01ce 2F4B     		ldr	r3, .L10+44
 349 01d0 1B68     		ldr	r3, [r3]
 350 01d2 A3F13F02 		sub	r2, r3, #63
 351              		.loc 1 143 18
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 10


 352 01d6 254B     		ldr	r3, .L10+12
 353 01d8 1B68     		ldr	r3, [r3]
 354              		.loc 1 143 34
 355 01da 5A63     		str	r2, [r3, #52]
 144:Core/Src/main.c ****             DC = DC-63;
 356              		.loc 1 144 20
 357 01dc 2B4B     		ldr	r3, .L10+44
 358 01de 1B68     		ldr	r3, [r3]
 359 01e0 3F3B     		subs	r3, r3, #63
 360              		.loc 1 144 16
 361 01e2 2A4A     		ldr	r2, .L10+44
 362 01e4 1360     		str	r3, [r2]
 363              	.L8:
 145:Core/Src/main.c ****             }
 146:Core/Src/main.c ****             
 147:Core/Src/main.c ****             sprintf(buffer, "O duty cycle atual do PWM eh %d.%03d\r\n", DC/1000, DC % 1000);
 364              		.loc 1 147 13
 365 01e6 294B     		ldr	r3, .L10+44
 366 01e8 1B68     		ldr	r3, [r3]
 367 01ea 294A     		ldr	r2, .L10+48
 368 01ec 82FB0312 		smull	r1, r2, r2, r3
 369 01f0 9211     		asrs	r2, r2, #6
 370 01f2 DB17     		asrs	r3, r3, #31
 371 01f4 D01A     		subs	r0, r2, r3
 372 01f6 254B     		ldr	r3, .L10+44
 373 01f8 1B68     		ldr	r3, [r3]
 374 01fa 254A     		ldr	r2, .L10+48
 375 01fc 82FB0312 		smull	r1, r2, r2, r3
 376 0200 9111     		asrs	r1, r2, #6
 377 0202 DA17     		asrs	r2, r3, #31
 378 0204 8A1A     		subs	r2, r1, r2
 379 0206 4FF47A71 		mov	r1, #1000
 380 020a 01FB02F2 		mul	r2, r1, r2
 381 020e 9A1A     		subs	r2, r3, r2
 382 0210 1346     		mov	r3, r2
 383 0212 0246     		mov	r2, r0
 384 0214 1F49     		ldr	r1, .L10+52
 385 0216 1C48     		ldr	r0, .L10+40
 386 0218 FFF7FEFF 		bl	sprintf
 148:Core/Src/main.c ****             CDC_Transmit_FS(buffer, strlen(buffer));
 387              		.loc 1 148 37
 388 021c 1A48     		ldr	r0, .L10+40
 389 021e FFF7FEFF 		bl	strlen
 390 0222 0346     		mov	r3, r0
 391              		.loc 1 148 13
 392 0224 9BB2     		uxth	r3, r3
 393 0226 1946     		mov	r1, r3
 394 0228 1748     		ldr	r0, .L10+40
 395 022a FFF7FEFF 		bl	CDC_Transmit_FS
 149:Core/Src/main.c ****             gUSBRxBuffer[0]=0;
 396              		.loc 1 149 28
 397 022e 104B     		ldr	r3, .L10+16
 398 0230 0022     		movs	r2, #0
 399 0232 1A70     		strb	r2, [r3]
 150:Core/Src/main.c ****             break;
 400              		.loc 1 150 13
 401 0234 10E0     		b	.L2
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 11


 402              	.L4:
 151:Core/Src/main.c ****           }
 152:Core/Src/main.c ****           default:
 153:Core/Src/main.c ****           {
 154:Core/Src/main.c ****             sprintf(buffer, "Nao reconheci o comando\r\n");
 403              		.loc 1 154 13
 404 0236 1849     		ldr	r1, .L10+56
 405 0238 1348     		ldr	r0, .L10+40
 406 023a FFF7FEFF 		bl	sprintf
 155:Core/Src/main.c ****             CDC_Transmit_FS(buffer, strlen(buffer));
 407              		.loc 1 155 37
 408 023e 1248     		ldr	r0, .L10+40
 409 0240 FFF7FEFF 		bl	strlen
 410 0244 0346     		mov	r3, r0
 411              		.loc 1 155 13
 412 0246 9BB2     		uxth	r3, r3
 413 0248 1946     		mov	r1, r3
 414 024a 0F48     		ldr	r0, .L10+40
 415 024c FFF7FEFF 		bl	CDC_Transmit_FS
 156:Core/Src/main.c ****             gUSBRxBuffer[0]=0;
 416              		.loc 1 156 28
 417 0250 074B     		ldr	r3, .L10+16
 418 0252 0022     		movs	r2, #0
 419 0254 1A70     		strb	r2, [r3]
 157:Core/Src/main.c ****             break;
 420              		.loc 1 157 13
 421 0256 00BF     		nop
 422              	.L2:
 115:Core/Src/main.c ****       {
 423              		.loc 1 115 9
 424 0258 EBE6     		b	.L9
 425              	.L11:
 426 025a 00BFAFF3 		.align	3
 426      0080
 427              	.L10:
 428 0260 00000000 		.word	0
 429 0264 00FEAF40 		.word	1085275648
 430 0268 00000000 		.word	htim3
 431 026c 00000000 		.word	htim4
 432 0270 00000000 		.word	gUSBRxBuffer
 433 0274 00000000 		.word	read_original
 434 0278 81000880 		.word	-2146959231
 435 027c 00005940 		.word	1079574528
 436 0280 00408F40 		.word	1083129856
 437 0284 00000000 		.word	.LC0
 438 0288 00000000 		.word	buffer
 439 028c 00000000 		.word	DC
 440 0290 D34D6210 		.word	274877907
 441 0294 5C000000 		.word	.LC1
 442 0298 84000000 		.word	.LC2
 443              		.cfi_endproc
 444              	.LFE224:
 446              		.section	.text.SystemClock_Config,"ax",%progbits
 447              		.align	1
 448              		.global	SystemClock_Config
 449              		.syntax unified
 450              		.thumb
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 12


 451              		.thumb_func
 453              	SystemClock_Config:
 454              	.LFB225:
 158:Core/Src/main.c ****           }
 159:Core/Src/main.c ****         }
 160:Core/Src/main.c ****       }
 161:Core/Src/main.c ****   }  
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****     /* USER CODE END WHILE */
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 166:Core/Src/main.c **** }
 167:Core/Src/main.c ****   /* USER CODE END 3 */
 168:Core/Src/main.c **** 
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** /**
 171:Core/Src/main.c ****   * @brief System Clock Configuration
 172:Core/Src/main.c ****   * @retval None
 173:Core/Src/main.c ****   */
 174:Core/Src/main.c **** void SystemClock_Config(void)
 175:Core/Src/main.c **** {
 455              		.loc 1 175 1
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 80
 458              		@ frame_needed = 1, uses_anonymous_args = 0
 459 0000 80B5     		push	{r7, lr}
 460              	.LCFI3:
 461              		.cfi_def_cfa_offset 8
 462              		.cfi_offset 7, -8
 463              		.cfi_offset 14, -4
 464 0002 94B0     		sub	sp, sp, #80
 465              	.LCFI4:
 466              		.cfi_def_cfa_offset 88
 467 0004 00AF     		add	r7, sp, #0
 468              	.LCFI5:
 469              		.cfi_def_cfa_register 7
 176:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 470              		.loc 1 176 22
 471 0006 07F12003 		add	r3, r7, #32
 472 000a 3022     		movs	r2, #48
 473 000c 0021     		movs	r1, #0
 474 000e 1846     		mov	r0, r3
 475 0010 FFF7FEFF 		bl	memset
 177:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 476              		.loc 1 177 22
 477 0014 07F10C03 		add	r3, r7, #12
 478 0018 0022     		movs	r2, #0
 479 001a 1A60     		str	r2, [r3]
 480 001c 5A60     		str	r2, [r3, #4]
 481 001e 9A60     		str	r2, [r3, #8]
 482 0020 DA60     		str	r2, [r3, #12]
 483 0022 1A61     		str	r2, [r3, #16]
 484              	.LBB4:
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 180:Core/Src/main.c ****   */
 181:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 13


 485              		.loc 1 181 3
 486 0024 0023     		movs	r3, #0
 487 0026 BB60     		str	r3, [r7, #8]
 488 0028 274B     		ldr	r3, .L16
 489 002a 1B6C     		ldr	r3, [r3, #64]
 490 002c 264A     		ldr	r2, .L16
 491 002e 43F08053 		orr	r3, r3, #268435456
 492 0032 1364     		str	r3, [r2, #64]
 493 0034 244B     		ldr	r3, .L16
 494 0036 1B6C     		ldr	r3, [r3, #64]
 495 0038 03F08053 		and	r3, r3, #268435456
 496 003c BB60     		str	r3, [r7, #8]
 497 003e BB68     		ldr	r3, [r7, #8]
 498              	.LBE4:
 499              	.LBB5:
 182:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 500              		.loc 1 182 3
 501 0040 0023     		movs	r3, #0
 502 0042 7B60     		str	r3, [r7, #4]
 503 0044 214B     		ldr	r3, .L16+4
 504 0046 1B68     		ldr	r3, [r3]
 505 0048 204A     		ldr	r2, .L16+4
 506 004a 43F44043 		orr	r3, r3, #49152
 507 004e 1360     		str	r3, [r2]
 508 0050 1E4B     		ldr	r3, .L16+4
 509 0052 1B68     		ldr	r3, [r3]
 510 0054 03F44043 		and	r3, r3, #49152
 511 0058 7B60     		str	r3, [r7, #4]
 512 005a 7B68     		ldr	r3, [r7, #4]
 513              	.LBE5:
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 185:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 186:Core/Src/main.c ****   */
 187:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 514              		.loc 1 187 36
 515 005c 0123     		movs	r3, #1
 516 005e 3B62     		str	r3, [r7, #32]
 188:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 517              		.loc 1 188 30
 518 0060 4FF48033 		mov	r3, #65536
 519 0064 7B62     		str	r3, [r7, #36]
 189:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 520              		.loc 1 189 34
 521 0066 0223     		movs	r3, #2
 522 0068 BB63     		str	r3, [r7, #56]
 190:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 523              		.loc 1 190 35
 524 006a 4FF48003 		mov	r3, #4194304
 525 006e FB63     		str	r3, [r7, #60]
 191:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 25;
 526              		.loc 1 191 30
 527 0070 1923     		movs	r3, #25
 528 0072 3B64     		str	r3, [r7, #64]
 192:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 192;
 529              		.loc 1 192 30
 530 0074 C023     		movs	r3, #192
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 14


 531 0076 7B64     		str	r3, [r7, #68]
 193:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 532              		.loc 1 193 30
 533 0078 0223     		movs	r3, #2
 534 007a BB64     		str	r3, [r7, #72]
 194:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 535              		.loc 1 194 30
 536 007c 0423     		movs	r3, #4
 537 007e FB64     		str	r3, [r7, #76]
 195:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 538              		.loc 1 195 7
 539 0080 07F12003 		add	r3, r7, #32
 540 0084 1846     		mov	r0, r3
 541 0086 FFF7FEFF 		bl	HAL_RCC_OscConfig
 542 008a 0346     		mov	r3, r0
 543              		.loc 1 195 6
 544 008c 002B     		cmp	r3, #0
 545 008e 01D0     		beq	.L13
 196:Core/Src/main.c ****   {
 197:Core/Src/main.c ****     Error_Handler();
 546              		.loc 1 197 5
 547 0090 FFF7FEFF 		bl	Error_Handler
 548              	.L13:
 198:Core/Src/main.c ****   }
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 201:Core/Src/main.c ****   */
 202:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 549              		.loc 1 202 31
 550 0094 0F23     		movs	r3, #15
 551 0096 FB60     		str	r3, [r7, #12]
 203:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 204:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 552              		.loc 1 204 34
 553 0098 0223     		movs	r3, #2
 554 009a 3B61     		str	r3, [r7, #16]
 205:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 555              		.loc 1 205 35
 556 009c 0023     		movs	r3, #0
 557 009e 7B61     		str	r3, [r7, #20]
 206:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 558              		.loc 1 206 36
 559 00a0 4FF48053 		mov	r3, #4096
 560 00a4 BB61     		str	r3, [r7, #24]
 207:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 561              		.loc 1 207 36
 562 00a6 0023     		movs	r3, #0
 563 00a8 FB61     		str	r3, [r7, #28]
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 564              		.loc 1 209 7
 565 00aa 07F10C03 		add	r3, r7, #12
 566 00ae 0321     		movs	r1, #3
 567 00b0 1846     		mov	r0, r3
 568 00b2 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 569 00b6 0346     		mov	r3, r0
 570              		.loc 1 209 6
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 15


 571 00b8 002B     		cmp	r3, #0
 572 00ba 01D0     		beq	.L15
 210:Core/Src/main.c ****   {
 211:Core/Src/main.c ****     Error_Handler();
 573              		.loc 1 211 5
 574 00bc FFF7FEFF 		bl	Error_Handler
 575              	.L15:
 212:Core/Src/main.c ****   }
 213:Core/Src/main.c **** }
 576              		.loc 1 213 1
 577 00c0 00BF     		nop
 578 00c2 5037     		adds	r7, r7, #80
 579              	.LCFI6:
 580              		.cfi_def_cfa_offset 8
 581 00c4 BD46     		mov	sp, r7
 582              	.LCFI7:
 583              		.cfi_def_cfa_register 13
 584              		@ sp needed
 585 00c6 80BD     		pop	{r7, pc}
 586              	.L17:
 587              		.align	2
 588              	.L16:
 589 00c8 00380240 		.word	1073887232
 590 00cc 00700040 		.word	1073770496
 591              		.cfi_endproc
 592              	.LFE225:
 594              		.section	.text.MX_ADC1_Init,"ax",%progbits
 595              		.align	1
 596              		.syntax unified
 597              		.thumb
 598              		.thumb_func
 600              	MX_ADC1_Init:
 601              	.LFB226:
 214:Core/Src/main.c **** 
 215:Core/Src/main.c **** /**
 216:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 217:Core/Src/main.c ****   * @param None
 218:Core/Src/main.c ****   * @retval None
 219:Core/Src/main.c ****   */
 220:Core/Src/main.c **** static void MX_ADC1_Init(void)
 221:Core/Src/main.c **** {
 602              		.loc 1 221 1
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 16
 605              		@ frame_needed = 1, uses_anonymous_args = 0
 606 0000 80B5     		push	{r7, lr}
 607              	.LCFI8:
 608              		.cfi_def_cfa_offset 8
 609              		.cfi_offset 7, -8
 610              		.cfi_offset 14, -4
 611 0002 84B0     		sub	sp, sp, #16
 612              	.LCFI9:
 613              		.cfi_def_cfa_offset 24
 614 0004 00AF     		add	r7, sp, #0
 615              	.LCFI10:
 616              		.cfi_def_cfa_register 7
 222:Core/Src/main.c **** 
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 16


 223:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 226:Core/Src/main.c **** 
 227:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 617              		.loc 1 227 26
 618 0006 3B46     		mov	r3, r7
 619 0008 0022     		movs	r2, #0
 620 000a 1A60     		str	r2, [r3]
 621 000c 5A60     		str	r2, [r3, #4]
 622 000e 9A60     		str	r2, [r3, #8]
 623 0010 DA60     		str	r2, [r3, #12]
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 230:Core/Src/main.c **** 
 231:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 234:Core/Src/main.c ****   */
 235:Core/Src/main.c ****   hadc1.Instance = ADC1;
 624              		.loc 1 235 18
 625 0012 214B     		ldr	r3, .L22
 626 0014 214A     		ldr	r2, .L22+4
 627 0016 1A60     		str	r2, [r3]
 236:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 628              		.loc 1 236 29
 629 0018 1F4B     		ldr	r3, .L22
 630 001a 4FF48032 		mov	r2, #65536
 631 001e 5A60     		str	r2, [r3, #4]
 237:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 632              		.loc 1 237 25
 633 0020 1D4B     		ldr	r3, .L22
 634 0022 0022     		movs	r2, #0
 635 0024 9A60     		str	r2, [r3, #8]
 238:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 636              		.loc 1 238 27
 637 0026 1C4B     		ldr	r3, .L22
 638 0028 0022     		movs	r2, #0
 639 002a 1A61     		str	r2, [r3, #16]
 239:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 640              		.loc 1 239 33
 641 002c 1A4B     		ldr	r3, .L22
 642 002e 0022     		movs	r2, #0
 643 0030 1A76     		strb	r2, [r3, #24]
 240:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 644              		.loc 1 240 36
 645 0032 194B     		ldr	r3, .L22
 646 0034 0022     		movs	r2, #0
 647 0036 83F82020 		strb	r2, [r3, #32]
 241:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 648              		.loc 1 241 35
 649 003a 174B     		ldr	r3, .L22
 650 003c 0022     		movs	r2, #0
 651 003e DA62     		str	r2, [r3, #44]
 242:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 652              		.loc 1 242 31
 653 0040 154B     		ldr	r3, .L22
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 17


 654 0042 174A     		ldr	r2, .L22+8
 655 0044 9A62     		str	r2, [r3, #40]
 243:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 656              		.loc 1 243 24
 657 0046 144B     		ldr	r3, .L22
 658 0048 0022     		movs	r2, #0
 659 004a DA60     		str	r2, [r3, #12]
 244:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 660              		.loc 1 244 30
 661 004c 124B     		ldr	r3, .L22
 662 004e 0122     		movs	r2, #1
 663 0050 DA61     		str	r2, [r3, #28]
 245:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 664              		.loc 1 245 36
 665 0052 114B     		ldr	r3, .L22
 666 0054 0022     		movs	r2, #0
 667 0056 83F83020 		strb	r2, [r3, #48]
 246:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 668              		.loc 1 246 27
 669 005a 0F4B     		ldr	r3, .L22
 670 005c 0122     		movs	r2, #1
 671 005e 5A61     		str	r2, [r3, #20]
 247:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 672              		.loc 1 247 7
 673 0060 0D48     		ldr	r0, .L22
 674 0062 FFF7FEFF 		bl	HAL_ADC_Init
 675 0066 0346     		mov	r3, r0
 676              		.loc 1 247 6
 677 0068 002B     		cmp	r3, #0
 678 006a 01D0     		beq	.L19
 248:Core/Src/main.c ****   {
 249:Core/Src/main.c ****     Error_Handler();
 679              		.loc 1 249 5
 680 006c FFF7FEFF 		bl	Error_Handler
 681              	.L19:
 250:Core/Src/main.c ****   }
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 253:Core/Src/main.c ****   */
 254:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 682              		.loc 1 254 19
 683 0070 0123     		movs	r3, #1
 684 0072 3B60     		str	r3, [r7]
 255:Core/Src/main.c ****   sConfig.Rank = 1;
 685              		.loc 1 255 16
 686 0074 0123     		movs	r3, #1
 687 0076 7B60     		str	r3, [r7, #4]
 256:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 688              		.loc 1 256 24
 689 0078 0023     		movs	r3, #0
 690 007a BB60     		str	r3, [r7, #8]
 257:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 691              		.loc 1 257 7
 692 007c 3B46     		mov	r3, r7
 693 007e 1946     		mov	r1, r3
 694 0080 0548     		ldr	r0, .L22
 695 0082 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 18


 696 0086 0346     		mov	r3, r0
 697              		.loc 1 257 6
 698 0088 002B     		cmp	r3, #0
 699 008a 01D0     		beq	.L21
 258:Core/Src/main.c ****   {
 259:Core/Src/main.c ****     Error_Handler();
 700              		.loc 1 259 5
 701 008c FFF7FEFF 		bl	Error_Handler
 702              	.L21:
 260:Core/Src/main.c ****   }
 261:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 264:Core/Src/main.c **** 
 265:Core/Src/main.c **** }
 703              		.loc 1 265 1
 704 0090 00BF     		nop
 705 0092 1037     		adds	r7, r7, #16
 706              	.LCFI11:
 707              		.cfi_def_cfa_offset 8
 708 0094 BD46     		mov	sp, r7
 709              	.LCFI12:
 710              		.cfi_def_cfa_register 13
 711              		@ sp needed
 712 0096 80BD     		pop	{r7, pc}
 713              	.L23:
 714              		.align	2
 715              	.L22:
 716 0098 00000000 		.word	hadc1
 717 009c 00200140 		.word	1073815552
 718 00a0 0100000F 		.word	251658241
 719              		.cfi_endproc
 720              	.LFE226:
 722              		.section	.text.MX_TIM3_Init,"ax",%progbits
 723              		.align	1
 724              		.syntax unified
 725              		.thumb
 726              		.thumb_func
 728              	MX_TIM3_Init:
 729              	.LFB227:
 266:Core/Src/main.c **** 
 267:Core/Src/main.c **** /**
 268:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 269:Core/Src/main.c ****   * @param None
 270:Core/Src/main.c ****   * @retval None
 271:Core/Src/main.c ****   */
 272:Core/Src/main.c **** static void MX_TIM3_Init(void)
 273:Core/Src/main.c **** {
 730              		.loc 1 273 1
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 24
 733              		@ frame_needed = 1, uses_anonymous_args = 0
 734 0000 80B5     		push	{r7, lr}
 735              	.LCFI13:
 736              		.cfi_def_cfa_offset 8
 737              		.cfi_offset 7, -8
 738              		.cfi_offset 14, -4
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 19


 739 0002 86B0     		sub	sp, sp, #24
 740              	.LCFI14:
 741              		.cfi_def_cfa_offset 32
 742 0004 00AF     		add	r7, sp, #0
 743              	.LCFI15:
 744              		.cfi_def_cfa_register 7
 274:Core/Src/main.c **** 
 275:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 276:Core/Src/main.c **** 
 277:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 278:Core/Src/main.c **** 
 279:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 745              		.loc 1 279 26
 746 0006 07F10803 		add	r3, r7, #8
 747 000a 0022     		movs	r2, #0
 748 000c 1A60     		str	r2, [r3]
 749 000e 5A60     		str	r2, [r3, #4]
 750 0010 9A60     		str	r2, [r3, #8]
 751 0012 DA60     		str	r2, [r3, #12]
 280:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 752              		.loc 1 280 27
 753 0014 3B46     		mov	r3, r7
 754 0016 0022     		movs	r2, #0
 755 0018 1A60     		str	r2, [r3]
 756 001a 5A60     		str	r2, [r3, #4]
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 285:Core/Src/main.c ****   htim3.Instance = TIM3;
 757              		.loc 1 285 18
 758 001c 1D4B     		ldr	r3, .L29
 759 001e 1E4A     		ldr	r2, .L29+4
 760 0020 1A60     		str	r2, [r3]
 286:Core/Src/main.c ****   htim3.Init.Prescaler = 10000-1;
 761              		.loc 1 286 24
 762 0022 1C4B     		ldr	r3, .L29
 763 0024 42F20F72 		movw	r2, #9999
 764 0028 5A60     		str	r2, [r3, #4]
 287:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 765              		.loc 1 287 26
 766 002a 1A4B     		ldr	r3, .L29
 767 002c 0022     		movs	r2, #0
 768 002e 9A60     		str	r2, [r3, #8]
 288:Core/Src/main.c ****   htim3.Init.Period = 480;
 769              		.loc 1 288 21
 770 0030 184B     		ldr	r3, .L29
 771 0032 4FF4F072 		mov	r2, #480
 772 0036 DA60     		str	r2, [r3, #12]
 289:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 773              		.loc 1 289 28
 774 0038 164B     		ldr	r3, .L29
 775 003a 0022     		movs	r2, #0
 776 003c 1A61     		str	r2, [r3, #16]
 290:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 777              		.loc 1 290 32
 778 003e 154B     		ldr	r3, .L29
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 20


 779 0040 0022     		movs	r2, #0
 780 0042 9A61     		str	r2, [r3, #24]
 291:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 781              		.loc 1 291 7
 782 0044 1348     		ldr	r0, .L29
 783 0046 FFF7FEFF 		bl	HAL_TIM_Base_Init
 784 004a 0346     		mov	r3, r0
 785              		.loc 1 291 6
 786 004c 002B     		cmp	r3, #0
 787 004e 01D0     		beq	.L25
 292:Core/Src/main.c ****   {
 293:Core/Src/main.c ****     Error_Handler();
 788              		.loc 1 293 5
 789 0050 FFF7FEFF 		bl	Error_Handler
 790              	.L25:
 294:Core/Src/main.c ****   }
 295:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 791              		.loc 1 295 34
 792 0054 4FF48053 		mov	r3, #4096
 793 0058 BB60     		str	r3, [r7, #8]
 296:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 794              		.loc 1 296 7
 795 005a 07F10803 		add	r3, r7, #8
 796 005e 1946     		mov	r1, r3
 797 0060 0C48     		ldr	r0, .L29
 798 0062 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 799 0066 0346     		mov	r3, r0
 800              		.loc 1 296 6
 801 0068 002B     		cmp	r3, #0
 802 006a 01D0     		beq	.L26
 297:Core/Src/main.c ****   {
 298:Core/Src/main.c ****     Error_Handler();
 803              		.loc 1 298 5
 804 006c FFF7FEFF 		bl	Error_Handler
 805              	.L26:
 299:Core/Src/main.c ****   }
 300:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 806              		.loc 1 300 37
 807 0070 0023     		movs	r3, #0
 808 0072 3B60     		str	r3, [r7]
 301:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 809              		.loc 1 301 33
 810 0074 0023     		movs	r3, #0
 811 0076 7B60     		str	r3, [r7, #4]
 302:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 812              		.loc 1 302 7
 813 0078 3B46     		mov	r3, r7
 814 007a 1946     		mov	r1, r3
 815 007c 0548     		ldr	r0, .L29
 816 007e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 817 0082 0346     		mov	r3, r0
 818              		.loc 1 302 6
 819 0084 002B     		cmp	r3, #0
 820 0086 01D0     		beq	.L28
 303:Core/Src/main.c ****   {
 304:Core/Src/main.c ****     Error_Handler();
 821              		.loc 1 304 5
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 21


 822 0088 FFF7FEFF 		bl	Error_Handler
 823              	.L28:
 305:Core/Src/main.c ****   }
 306:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 307:Core/Src/main.c **** 
 308:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 309:Core/Src/main.c **** 
 310:Core/Src/main.c **** }
 824              		.loc 1 310 1
 825 008c 00BF     		nop
 826 008e 1837     		adds	r7, r7, #24
 827              	.LCFI16:
 828              		.cfi_def_cfa_offset 8
 829 0090 BD46     		mov	sp, r7
 830              	.LCFI17:
 831              		.cfi_def_cfa_register 13
 832              		@ sp needed
 833 0092 80BD     		pop	{r7, pc}
 834              	.L30:
 835              		.align	2
 836              	.L29:
 837 0094 00000000 		.word	htim3
 838 0098 00040040 		.word	1073742848
 839              		.cfi_endproc
 840              	.LFE227:
 842              		.section	.text.MX_TIM4_Init,"ax",%progbits
 843              		.align	1
 844              		.syntax unified
 845              		.thumb
 846              		.thumb_func
 848              	MX_TIM4_Init:
 849              	.LFB228:
 311:Core/Src/main.c **** 
 312:Core/Src/main.c **** /**
 313:Core/Src/main.c ****   * @brief TIM4 Initialization Function
 314:Core/Src/main.c ****   * @param None
 315:Core/Src/main.c ****   * @retval None
 316:Core/Src/main.c ****   */
 317:Core/Src/main.c **** static void MX_TIM4_Init(void)
 318:Core/Src/main.c **** {
 850              		.loc 1 318 1
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 56
 853              		@ frame_needed = 1, uses_anonymous_args = 0
 854 0000 80B5     		push	{r7, lr}
 855              	.LCFI18:
 856              		.cfi_def_cfa_offset 8
 857              		.cfi_offset 7, -8
 858              		.cfi_offset 14, -4
 859 0002 8EB0     		sub	sp, sp, #56
 860              	.LCFI19:
 861              		.cfi_def_cfa_offset 64
 862 0004 00AF     		add	r7, sp, #0
 863              	.LCFI20:
 864              		.cfi_def_cfa_register 7
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 0 */
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 22


 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****   /* USER CODE END TIM4_Init 0 */
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 865              		.loc 1 324 26
 866 0006 07F12803 		add	r3, r7, #40
 867 000a 0022     		movs	r2, #0
 868 000c 1A60     		str	r2, [r3]
 869 000e 5A60     		str	r2, [r3, #4]
 870 0010 9A60     		str	r2, [r3, #8]
 871 0012 DA60     		str	r2, [r3, #12]
 325:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 872              		.loc 1 325 27
 873 0014 07F12003 		add	r3, r7, #32
 874 0018 0022     		movs	r2, #0
 875 001a 1A60     		str	r2, [r3]
 876 001c 5A60     		str	r2, [r3, #4]
 326:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 877              		.loc 1 326 22
 878 001e 3B1D     		adds	r3, r7, #4
 879 0020 0022     		movs	r2, #0
 880 0022 1A60     		str	r2, [r3]
 881 0024 5A60     		str	r2, [r3, #4]
 882 0026 9A60     		str	r2, [r3, #8]
 883 0028 DA60     		str	r2, [r3, #12]
 884 002a 1A61     		str	r2, [r3, #16]
 885 002c 5A61     		str	r2, [r3, #20]
 886 002e 9A61     		str	r2, [r3, #24]
 327:Core/Src/main.c **** 
 328:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 1 */
 329:Core/Src/main.c **** 
 330:Core/Src/main.c ****   /* USER CODE END TIM4_Init 1 */
 331:Core/Src/main.c ****   htim4.Instance = TIM4;
 887              		.loc 1 331 18
 888 0030 2C4B     		ldr	r3, .L37
 889 0032 2D4A     		ldr	r2, .L37+4
 890 0034 1A60     		str	r2, [r3]
 332:Core/Src/main.c ****   htim4.Init.Prescaler = 12-1;
 891              		.loc 1 332 24
 892 0036 2B4B     		ldr	r3, .L37
 893 0038 0B22     		movs	r2, #11
 894 003a 5A60     		str	r2, [r3, #4]
 333:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 895              		.loc 1 333 26
 896 003c 294B     		ldr	r3, .L37
 897 003e 0022     		movs	r2, #0
 898 0040 9A60     		str	r2, [r3, #8]
 334:Core/Src/main.c ****   htim4.Init.Period = 1000;
 899              		.loc 1 334 21
 900 0042 284B     		ldr	r3, .L37
 901 0044 4FF47A72 		mov	r2, #1000
 902 0048 DA60     		str	r2, [r3, #12]
 335:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 903              		.loc 1 335 28
 904 004a 264B     		ldr	r3, .L37
 905 004c 0022     		movs	r2, #0
 906 004e 1A61     		str	r2, [r3, #16]
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 23


 336:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 907              		.loc 1 336 32
 908 0050 244B     		ldr	r3, .L37
 909 0052 0022     		movs	r2, #0
 910 0054 9A61     		str	r2, [r3, #24]
 337:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 911              		.loc 1 337 7
 912 0056 2348     		ldr	r0, .L37
 913 0058 FFF7FEFF 		bl	HAL_TIM_Base_Init
 914 005c 0346     		mov	r3, r0
 915              		.loc 1 337 6
 916 005e 002B     		cmp	r3, #0
 917 0060 01D0     		beq	.L32
 338:Core/Src/main.c ****   {
 339:Core/Src/main.c ****     Error_Handler();
 918              		.loc 1 339 5
 919 0062 FFF7FEFF 		bl	Error_Handler
 920              	.L32:
 340:Core/Src/main.c ****   }
 341:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 921              		.loc 1 341 34
 922 0066 4FF48053 		mov	r3, #4096
 923 006a BB62     		str	r3, [r7, #40]
 342:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 924              		.loc 1 342 7
 925 006c 07F12803 		add	r3, r7, #40
 926 0070 1946     		mov	r1, r3
 927 0072 1C48     		ldr	r0, .L37
 928 0074 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 929 0078 0346     		mov	r3, r0
 930              		.loc 1 342 6
 931 007a 002B     		cmp	r3, #0
 932 007c 01D0     		beq	.L33
 343:Core/Src/main.c ****   {
 344:Core/Src/main.c ****     Error_Handler();
 933              		.loc 1 344 5
 934 007e FFF7FEFF 		bl	Error_Handler
 935              	.L33:
 345:Core/Src/main.c ****   }
 346:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 936              		.loc 1 346 7
 937 0082 1848     		ldr	r0, .L37
 938 0084 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 939 0088 0346     		mov	r3, r0
 940              		.loc 1 346 6
 941 008a 002B     		cmp	r3, #0
 942 008c 01D0     		beq	.L34
 347:Core/Src/main.c ****   {
 348:Core/Src/main.c ****     Error_Handler();
 943              		.loc 1 348 5
 944 008e FFF7FEFF 		bl	Error_Handler
 945              	.L34:
 349:Core/Src/main.c ****   }
 350:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 946              		.loc 1 350 37
 947 0092 0023     		movs	r3, #0
 948 0094 3B62     		str	r3, [r7, #32]
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 24


 351:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 949              		.loc 1 351 33
 950 0096 0023     		movs	r3, #0
 951 0098 7B62     		str	r3, [r7, #36]
 352:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 952              		.loc 1 352 7
 953 009a 07F12003 		add	r3, r7, #32
 954 009e 1946     		mov	r1, r3
 955 00a0 1048     		ldr	r0, .L37
 956 00a2 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 957 00a6 0346     		mov	r3, r0
 958              		.loc 1 352 6
 959 00a8 002B     		cmp	r3, #0
 960 00aa 01D0     		beq	.L35
 353:Core/Src/main.c ****   {
 354:Core/Src/main.c ****     Error_Handler();
 961              		.loc 1 354 5
 962 00ac FFF7FEFF 		bl	Error_Handler
 963              	.L35:
 355:Core/Src/main.c ****   }
 356:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 964              		.loc 1 356 20
 965 00b0 6023     		movs	r3, #96
 966 00b2 7B60     		str	r3, [r7, #4]
 357:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 967              		.loc 1 357 19
 968 00b4 0023     		movs	r3, #0
 969 00b6 BB60     		str	r3, [r7, #8]
 358:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 970              		.loc 1 358 24
 971 00b8 0023     		movs	r3, #0
 972 00ba FB60     		str	r3, [r7, #12]
 359:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 973              		.loc 1 359 24
 974 00bc 0023     		movs	r3, #0
 975 00be 7B61     		str	r3, [r7, #20]
 360:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 976              		.loc 1 360 7
 977 00c0 3B1D     		adds	r3, r7, #4
 978 00c2 0022     		movs	r2, #0
 979 00c4 1946     		mov	r1, r3
 980 00c6 0748     		ldr	r0, .L37
 981 00c8 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 982 00cc 0346     		mov	r3, r0
 983              		.loc 1 360 6
 984 00ce 002B     		cmp	r3, #0
 985 00d0 01D0     		beq	.L36
 361:Core/Src/main.c ****   {
 362:Core/Src/main.c ****     Error_Handler();
 986              		.loc 1 362 5
 987 00d2 FFF7FEFF 		bl	Error_Handler
 988              	.L36:
 363:Core/Src/main.c ****   }
 364:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 2 */
 365:Core/Src/main.c **** 
 366:Core/Src/main.c ****   /* USER CODE END TIM4_Init 2 */
 367:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim4);
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 25


 989              		.loc 1 367 3
 990 00d6 0348     		ldr	r0, .L37
 991 00d8 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 368:Core/Src/main.c **** 
 369:Core/Src/main.c **** }
 992              		.loc 1 369 1
 993 00dc 00BF     		nop
 994 00de 3837     		adds	r7, r7, #56
 995              	.LCFI21:
 996              		.cfi_def_cfa_offset 8
 997 00e0 BD46     		mov	sp, r7
 998              	.LCFI22:
 999              		.cfi_def_cfa_register 13
 1000              		@ sp needed
 1001 00e2 80BD     		pop	{r7, pc}
 1002              	.L38:
 1003              		.align	2
 1004              	.L37:
 1005 00e4 00000000 		.word	htim4
 1006 00e8 00080040 		.word	1073743872
 1007              		.cfi_endproc
 1008              	.LFE228:
 1010              		.section	.text.MX_GPIO_Init,"ax",%progbits
 1011              		.align	1
 1012              		.syntax unified
 1013              		.thumb
 1014              		.thumb_func
 1016              	MX_GPIO_Init:
 1017              	.LFB229:
 370:Core/Src/main.c **** 
 371:Core/Src/main.c **** /**
 372:Core/Src/main.c ****   * @brief GPIO Initialization Function
 373:Core/Src/main.c ****   * @param None
 374:Core/Src/main.c ****   * @retval None
 375:Core/Src/main.c ****   */
 376:Core/Src/main.c **** static void MX_GPIO_Init(void)
 377:Core/Src/main.c **** {
 1018              		.loc 1 377 1
 1019              		.cfi_startproc
 1020              		@ args = 0, pretend = 0, frame = 40
 1021              		@ frame_needed = 1, uses_anonymous_args = 0
 1022 0000 80B5     		push	{r7, lr}
 1023              	.LCFI23:
 1024              		.cfi_def_cfa_offset 8
 1025              		.cfi_offset 7, -8
 1026              		.cfi_offset 14, -4
 1027 0002 8AB0     		sub	sp, sp, #40
 1028              	.LCFI24:
 1029              		.cfi_def_cfa_offset 48
 1030 0004 00AF     		add	r7, sp, #0
 1031              	.LCFI25:
 1032              		.cfi_def_cfa_register 7
 378:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 1033              		.loc 1 378 20
 1034 0006 07F11403 		add	r3, r7, #20
 1035 000a 0022     		movs	r2, #0
 1036 000c 1A60     		str	r2, [r3]
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 26


 1037 000e 5A60     		str	r2, [r3, #4]
 1038 0010 9A60     		str	r2, [r3, #8]
 1039 0012 DA60     		str	r2, [r3, #12]
 1040 0014 1A61     		str	r2, [r3, #16]
 1041              	.LBB6:
 379:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 380:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 381:Core/Src/main.c **** 
 382:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 383:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 1042              		.loc 1 383 3
 1043 0016 0023     		movs	r3, #0
 1044 0018 3B61     		str	r3, [r7, #16]
 1045 001a 374B     		ldr	r3, .L40
 1046 001c 1B6B     		ldr	r3, [r3, #48]
 1047 001e 364A     		ldr	r2, .L40
 1048 0020 43F00403 		orr	r3, r3, #4
 1049 0024 1363     		str	r3, [r2, #48]
 1050 0026 344B     		ldr	r3, .L40
 1051 0028 1B6B     		ldr	r3, [r3, #48]
 1052 002a 03F00403 		and	r3, r3, #4
 1053 002e 3B61     		str	r3, [r7, #16]
 1054 0030 3B69     		ldr	r3, [r7, #16]
 1055              	.LBE6:
 1056              	.LBB7:
 384:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 1057              		.loc 1 384 3
 1058 0032 0023     		movs	r3, #0
 1059 0034 FB60     		str	r3, [r7, #12]
 1060 0036 304B     		ldr	r3, .L40
 1061 0038 1B6B     		ldr	r3, [r3, #48]
 1062 003a 2F4A     		ldr	r2, .L40
 1063 003c 43F08003 		orr	r3, r3, #128
 1064 0040 1363     		str	r3, [r2, #48]
 1065 0042 2D4B     		ldr	r3, .L40
 1066 0044 1B6B     		ldr	r3, [r3, #48]
 1067 0046 03F08003 		and	r3, r3, #128
 1068 004a FB60     		str	r3, [r7, #12]
 1069 004c FB68     		ldr	r3, [r7, #12]
 1070              	.LBE7:
 1071              	.LBB8:
 385:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 1072              		.loc 1 385 3
 1073 004e 0023     		movs	r3, #0
 1074 0050 BB60     		str	r3, [r7, #8]
 1075 0052 294B     		ldr	r3, .L40
 1076 0054 1B6B     		ldr	r3, [r3, #48]
 1077 0056 284A     		ldr	r2, .L40
 1078 0058 43F00103 		orr	r3, r3, #1
 1079 005c 1363     		str	r3, [r2, #48]
 1080 005e 264B     		ldr	r3, .L40
 1081 0060 1B6B     		ldr	r3, [r3, #48]
 1082 0062 03F00103 		and	r3, r3, #1
 1083 0066 BB60     		str	r3, [r7, #8]
 1084 0068 BB68     		ldr	r3, [r7, #8]
 1085              	.LBE8:
 1086              	.LBB9:
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 27


 386:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 1087              		.loc 1 386 3
 1088 006a 0023     		movs	r3, #0
 1089 006c 7B60     		str	r3, [r7, #4]
 1090 006e 224B     		ldr	r3, .L40
 1091 0070 1B6B     		ldr	r3, [r3, #48]
 1092 0072 214A     		ldr	r2, .L40
 1093 0074 43F00203 		orr	r3, r3, #2
 1094 0078 1363     		str	r3, [r2, #48]
 1095 007a 1F4B     		ldr	r3, .L40
 1096 007c 1B6B     		ldr	r3, [r3, #48]
 1097 007e 03F00203 		and	r3, r3, #2
 1098 0082 7B60     		str	r3, [r7, #4]
 1099 0084 7B68     		ldr	r3, [r7, #4]
 1100              	.LBE9:
 387:Core/Src/main.c **** 
 388:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 389:Core/Src/main.c ****   HAL_GPIO_WritePin(KIT_LED_GPIO_Port, KIT_LED_Pin, GPIO_PIN_RESET);
 1101              		.loc 1 389 3
 1102 0086 0022     		movs	r2, #0
 1103 0088 4FF40051 		mov	r1, #8192
 1104 008c 1B48     		ldr	r0, .L40+4
 1105 008e FFF7FEFF 		bl	HAL_GPIO_WritePin
 390:Core/Src/main.c **** 
 391:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 392:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 1106              		.loc 1 392 3
 1107 0092 0022     		movs	r2, #0
 1108 0094 F821     		movs	r1, #248
 1109 0096 1A48     		ldr	r0, .L40+8
 1110 0098 FFF7FEFF 		bl	HAL_GPIO_WritePin
 393:Core/Src/main.c ****                           |LED5_Pin, GPIO_PIN_RESET);
 394:Core/Src/main.c **** 
 395:Core/Src/main.c ****   /*Configure GPIO pin : KIT_LED_Pin */
 396:Core/Src/main.c ****   GPIO_InitStruct.Pin = KIT_LED_Pin;
 1111              		.loc 1 396 23
 1112 009c 4FF40053 		mov	r3, #8192
 1113 00a0 7B61     		str	r3, [r7, #20]
 397:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1114              		.loc 1 397 24
 1115 00a2 0123     		movs	r3, #1
 1116 00a4 BB61     		str	r3, [r7, #24]
 398:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1117              		.loc 1 398 24
 1118 00a6 0023     		movs	r3, #0
 1119 00a8 FB61     		str	r3, [r7, #28]
 399:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1120              		.loc 1 399 25
 1121 00aa 0023     		movs	r3, #0
 1122 00ac 3B62     		str	r3, [r7, #32]
 400:Core/Src/main.c ****   HAL_GPIO_Init(KIT_LED_GPIO_Port, &GPIO_InitStruct);
 1123              		.loc 1 400 3
 1124 00ae 07F11403 		add	r3, r7, #20
 1125 00b2 1946     		mov	r1, r3
 1126 00b4 1148     		ldr	r0, .L40+4
 1127 00b6 FFF7FEFF 		bl	HAL_GPIO_Init
 401:Core/Src/main.c **** 
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 28


 402:Core/Src/main.c ****   /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
 403:Core/Src/main.c ****                            LED5_Pin */
 404:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 1128              		.loc 1 404 23
 1129 00ba F823     		movs	r3, #248
 1130 00bc 7B61     		str	r3, [r7, #20]
 405:Core/Src/main.c ****                           |LED5_Pin;
 406:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1131              		.loc 1 406 24
 1132 00be 0123     		movs	r3, #1
 1133 00c0 BB61     		str	r3, [r7, #24]
 407:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1134              		.loc 1 407 24
 1135 00c2 0023     		movs	r3, #0
 1136 00c4 FB61     		str	r3, [r7, #28]
 408:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1137              		.loc 1 408 25
 1138 00c6 0023     		movs	r3, #0
 1139 00c8 3B62     		str	r3, [r7, #32]
 409:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1140              		.loc 1 409 3
 1141 00ca 07F11403 		add	r3, r7, #20
 1142 00ce 1946     		mov	r1, r3
 1143 00d0 0B48     		ldr	r0, .L40+8
 1144 00d2 FFF7FEFF 		bl	HAL_GPIO_Init
 410:Core/Src/main.c **** 
 411:Core/Src/main.c ****   /*Configure GPIO pins : BOTAO1_Pin BOTAO2_Pin */
 412:Core/Src/main.c ****   GPIO_InitStruct.Pin = BOTAO1_Pin|BOTAO2_Pin;
 1145              		.loc 1 412 23
 1146 00d6 4FF44053 		mov	r3, #12288
 1147 00da 7B61     		str	r3, [r7, #20]
 413:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 1148              		.loc 1 413 24
 1149 00dc 0023     		movs	r3, #0
 1150 00de BB61     		str	r3, [r7, #24]
 414:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1151              		.loc 1 414 24
 1152 00e0 0023     		movs	r3, #0
 1153 00e2 FB61     		str	r3, [r7, #28]
 415:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 1154              		.loc 1 415 3
 1155 00e4 07F11403 		add	r3, r7, #20
 1156 00e8 1946     		mov	r1, r3
 1157 00ea 0648     		ldr	r0, .L40+12
 1158 00ec FFF7FEFF 		bl	HAL_GPIO_Init
 416:Core/Src/main.c **** 
 417:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 418:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 419:Core/Src/main.c **** }
 1159              		.loc 1 419 1
 1160 00f0 00BF     		nop
 1161 00f2 2837     		adds	r7, r7, #40
 1162              	.LCFI26:
 1163              		.cfi_def_cfa_offset 8
 1164 00f4 BD46     		mov	sp, r7
 1165              	.LCFI27:
 1166              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 29


 1167              		@ sp needed
 1168 00f6 80BD     		pop	{r7, pc}
 1169              	.L41:
 1170              		.align	2
 1171              	.L40:
 1172 00f8 00380240 		.word	1073887232
 1173 00fc 00080240 		.word	1073874944
 1174 0100 00000240 		.word	1073872896
 1175 0104 00040240 		.word	1073873920
 1176              		.cfi_endproc
 1177              	.LFE229:
 1179              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1180              		.align	1
 1181              		.global	HAL_TIM_PeriodElapsedCallback
 1182              		.syntax unified
 1183              		.thumb
 1184              		.thumb_func
 1186              	HAL_TIM_PeriodElapsedCallback:
 1187              	.LFB230:
 420:Core/Src/main.c **** 
 421:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 422:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 423:Core/Src/main.c **** {
 1188              		.loc 1 423 1
 1189              		.cfi_startproc
 1190              		@ args = 0, pretend = 0, frame = 8
 1191              		@ frame_needed = 1, uses_anonymous_args = 0
 1192 0000 80B5     		push	{r7, lr}
 1193              	.LCFI28:
 1194              		.cfi_def_cfa_offset 8
 1195              		.cfi_offset 7, -8
 1196              		.cfi_offset 14, -4
 1197 0002 82B0     		sub	sp, sp, #8
 1198              	.LCFI29:
 1199              		.cfi_def_cfa_offset 16
 1200 0004 00AF     		add	r7, sp, #0
 1201              	.LCFI30:
 1202              		.cfi_def_cfa_register 7
 1203 0006 7860     		str	r0, [r7, #4]
 424:Core/Src/main.c ****   if (htim->Instance == TIM3)
 1204              		.loc 1 424 11
 1205 0008 7B68     		ldr	r3, [r7, #4]
 1206 000a 1B68     		ldr	r3, [r3]
 1207              		.loc 1 424 6
 1208 000c 234A     		ldr	r2, .L45
 1209 000e 9342     		cmp	r3, r2
 1210 0010 3FD1     		bne	.L44
 425:Core/Src/main.c ****   {
 426:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1211              		.loc 1 426 7
 1212 0012 2348     		ldr	r0, .L45+4
 1213 0014 FFF7FEFF 		bl	HAL_ADC_Start
 427:Core/Src/main.c ****       HAL_ADC_PollForConversion(&hadc1, 100);
 1214              		.loc 1 427 7
 1215 0018 6421     		movs	r1, #100
 1216 001a 2148     		ldr	r0, .L45+4
 1217 001c FFF7FEFF 		bl	HAL_ADC_PollForConversion
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 30


 428:Core/Src/main.c ****       read = HAL_ADC_GetValue(&hadc1); //L√™ o valor do ADC
 1218              		.loc 1 428 14
 1219 0020 1F48     		ldr	r0, .L45+4
 1220 0022 FFF7FEFF 		bl	HAL_ADC_GetValue
 1221 0026 0346     		mov	r3, r0
 1222              		.loc 1 428 12
 1223 0028 9AB2     		uxth	r2, r3
 1224 002a 1E4B     		ldr	r3, .L45+8
 1225 002c 1A80     		strh	r2, [r3]	@ movhi
 429:Core/Src/main.c ****       read_original = read;  
 1226              		.loc 1 429 21
 1227 002e 1D4B     		ldr	r3, .L45+8
 1228 0030 1A88     		ldrh	r2, [r3]
 1229 0032 1D4B     		ldr	r3, .L45+12
 1230 0034 1A80     		strh	r2, [r3]	@ movhi
 430:Core/Src/main.c **** 
 431:Core/Src/main.c ****       //read = 2519-read; //inverte a raz√£o de crescimento na porta do ADC
 432:Core/Src/main.c ****       read = read/500;
 1231              		.loc 1 432 12
 1232 0036 1B4B     		ldr	r3, .L45+8
 1233 0038 1B88     		ldrh	r3, [r3]
 1234 003a 1C4A     		ldr	r2, .L45+16
 1235 003c A2FB0323 		umull	r2, r3, r2, r3
 1236 0040 5B09     		lsrs	r3, r3, #5
 1237 0042 9AB2     		uxth	r2, r3
 1238 0044 174B     		ldr	r3, .L45+8
 1239 0046 1A80     		strh	r2, [r3]	@ movhi
 433:Core/Src/main.c ****       read = 5-read;
 1240              		.loc 1 433 15
 1241 0048 164B     		ldr	r3, .L45+8
 1242 004a 1B88     		ldrh	r3, [r3]
 1243 004c C3F10503 		rsb	r3, r3, #5
 1244 0050 9AB2     		uxth	r2, r3
 1245              		.loc 1 433 12
 1246 0052 144B     		ldr	r3, .L45+8
 1247 0054 1A80     		strh	r2, [r3]	@ movhi
 434:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, ~((1<<read)-1)<<3, GPIO_PIN_RESET);
 1248              		.loc 1 434 36
 1249 0056 134B     		ldr	r3, .L45+8
 1250 0058 1B88     		ldrh	r3, [r3]
 1251 005a 1A46     		mov	r2, r3
 1252 005c 0123     		movs	r3, #1
 1253 005e 9340     		lsls	r3, r3, r2
 1254              		.loc 1 434 7
 1255 0060 9BB2     		uxth	r3, r3
 1256 0062 5B42     		rsbs	r3, r3, #0
 1257 0064 9BB2     		uxth	r3, r3
 1258 0066 DB00     		lsls	r3, r3, #3
 1259 0068 9BB2     		uxth	r3, r3
 1260 006a 0022     		movs	r2, #0
 1261 006c 1946     		mov	r1, r3
 1262 006e 1048     		ldr	r0, .L45+20
 1263 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 435:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, ((1<<read)-1)<<3, GPIO_PIN_SET);
 1264              		.loc 1 435 35
 1265 0074 0B4B     		ldr	r3, .L45+8
 1266 0076 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 31


 1267 0078 1A46     		mov	r2, r3
 1268 007a 0123     		movs	r3, #1
 1269 007c 9340     		lsls	r3, r3, r2
 1270              		.loc 1 435 42
 1271 007e 9BB2     		uxth	r3, r3
 1272 0080 013B     		subs	r3, r3, #1
 1273 0082 9BB2     		uxth	r3, r3
 1274              		.loc 1 435 7
 1275 0084 DB00     		lsls	r3, r3, #3
 1276 0086 9BB2     		uxth	r3, r3
 1277 0088 0122     		movs	r2, #1
 1278 008a 1946     		mov	r1, r3
 1279 008c 0848     		ldr	r0, .L45+20
 1280 008e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1281              	.L44:
 436:Core/Src/main.c ****   }
 437:Core/Src/main.c **** }
 1282              		.loc 1 437 1
 1283 0092 00BF     		nop
 1284 0094 0837     		adds	r7, r7, #8
 1285              	.LCFI31:
 1286              		.cfi_def_cfa_offset 8
 1287 0096 BD46     		mov	sp, r7
 1288              	.LCFI32:
 1289              		.cfi_def_cfa_register 13
 1290              		@ sp needed
 1291 0098 80BD     		pop	{r7, pc}
 1292              	.L46:
 1293 009a 00BF     		.align	2
 1294              	.L45:
 1295 009c 00040040 		.word	1073742848
 1296 00a0 00000000 		.word	hadc1
 1297 00a4 00000000 		.word	read
 1298 00a8 00000000 		.word	read_original
 1299 00ac D34D6210 		.word	274877907
 1300 00b0 00000240 		.word	1073872896
 1301              		.cfi_endproc
 1302              	.LFE230:
 1304              		.section	.text.Error_Handler,"ax",%progbits
 1305              		.align	1
 1306              		.global	Error_Handler
 1307              		.syntax unified
 1308              		.thumb
 1309              		.thumb_func
 1311              	Error_Handler:
 1312              	.LFB231:
 438:Core/Src/main.c **** /* USER CODE END 4 */
 439:Core/Src/main.c **** 
 440:Core/Src/main.c **** /**
 441:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 442:Core/Src/main.c ****   * @retval None
 443:Core/Src/main.c ****   */
 444:Core/Src/main.c **** void Error_Handler(void)
 445:Core/Src/main.c **** {
 1313              		.loc 1 445 1
 1314              		.cfi_startproc
 1315              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 32


 1316              		@ frame_needed = 1, uses_anonymous_args = 0
 1317              		@ link register save eliminated.
 1318 0000 80B4     		push	{r7}
 1319              	.LCFI33:
 1320              		.cfi_def_cfa_offset 4
 1321              		.cfi_offset 7, -4
 1322 0002 00AF     		add	r7, sp, #0
 1323              	.LCFI34:
 1324              		.cfi_def_cfa_register 7
 1325              	.LBB10:
 1326              	.LBB11:
 1327              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 33


  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 34


 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 35


 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 36


 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 37


 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 38


 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 39


 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 40


 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 41


 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 42


 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 43


 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 44


 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 45


 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 46


 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 47


 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 48


 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 49


 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1328              		.loc 2 962 3
 1329              		.syntax unified
 1330              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1331 0004 72B6     		cpsid i
 1332              	@ 0 "" 2
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1333              		.loc 2 963 1
 1334              		.thumb
 1335              		.syntax unified
 1336 0006 00BF     		nop
 1337              	.L48:
 1338              	.LBE11:
 1339              	.LBE10:
 446:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 447:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 448:Core/Src/main.c ****   __disable_irq();
 449:Core/Src/main.c ****   while (1)
 1340              		.loc 1 449 9 discriminator 1
 1341 0008 FEE7     		b	.L48
 1342              		.cfi_endproc
 1343              	.LFE231:
 1345              		.text
 1346              	.Letext0:
 1347              		.file 3 "c:\\arm-gcc\\tools\\tools\\arm-gnu-toolchain-11.3.rel1-mingw-w64-i686-arm-none-eabi\\arm-
 1348              		.file 4 "c:\\arm-gcc\\tools\\tools\\arm-gnu-toolchain-11.3.rel1-mingw-w64-i686-arm-none-eabi\\arm-
 1349              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1350              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1351              		.file 7 "c:\\arm-gcc\\tools\\tools\\arm-gnu-toolchain-11.3.rel1-mingw-w64-i686-arm-none-eabi\\lib\
 1352              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1353              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1354              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1355              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1356              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1357              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1358              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1359              		.file 15 "Core/Inc/main.h"
 1360              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1361              		.file 17 "USB_DEVICE/App/usbd_cdc_if.h"
 1362              		.file 18 "c:\\arm-gcc\\tools\\tools\\arm-gnu-toolchain-11.3.rel1-mingw-w64-i686-arm-none-eabi\\arm
 1363              		.file 19 "c:\\arm-gcc\\tools\\tools\\arm-gnu-toolchain-11.3.rel1-mingw-w64-i686-arm-none-eabi\\arm
 1364              		.file 20 "USB_DEVICE/App/usb_device.h"
 1365              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 50


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:24     .bss.hadc1:00000000 hadc1
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:21     .bss.hadc1:00000000 $d
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:31     .bss.htim3:00000000 htim3
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:28     .bss.htim3:00000000 $d
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:38     .bss.htim4:00000000 htim4
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:35     .bss.htim4:00000000 $d
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:45     .bss.read:00000000 read
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:42     .bss.read:00000000 $d
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:52     .bss.read_original:00000000 read_original
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:49     .bss.read_original:00000000 $d
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:59     .bss.buffer:00000000 buffer
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:56     .bss.buffer:00000000 $d
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:66     .bss.gUSBRxBuffer:00000000 gUSBRxBuffer
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:63     .bss.gUSBRxBuffer:00000000 $d
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:73     .bss.DC:00000000 DC
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:70     .bss.DC:00000000 $d
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:81     .rodata:00000000 $d
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:92     .text.main:00000000 $t
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:98     .text.main:00000000 main
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:453    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:1016   .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:848    .text.MX_TIM4_Init:00000000 MX_TIM4_Init
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:728    .text.MX_TIM3_Init:00000000 MX_TIM3_Init
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:600    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:428    .text.main:00000260 $d
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:447    .text.SystemClock_Config:00000000 $t
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:1311   .text.Error_Handler:00000000 Error_Handler
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:589    .text.SystemClock_Config:000000c8 $d
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:595    .text.MX_ADC1_Init:00000000 $t
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:716    .text.MX_ADC1_Init:00000098 $d
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:723    .text.MX_TIM3_Init:00000000 $t
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:837    .text.MX_TIM3_Init:00000094 $d
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:843    .text.MX_TIM4_Init:00000000 $t
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:1005   .text.MX_TIM4_Init:000000e4 $d
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:1011   .text.MX_GPIO_Init:00000000 $t
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:1172   .text.MX_GPIO_Init:000000f8 $d
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:1180   .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:1186   .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:1295   .text.HAL_TIM_PeriodElapsedCallback:0000009c $d
C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s:1305   .text.Error_Handler:00000000 $t

UNDEFINED SYMBOLS
__aeabi_i2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2iz
__aeabi_dsub
HAL_Init
MX_USB_DEVICE_Init
HAL_TIM_Base_Start_IT
HAL_TIM_PWM_Start
sprintf
strlen
CDC_Transmit_FS
memset
ARM GAS  C:\Users\natal\AppData\Local\Temp\ccKTbs8a.s 			page 51


HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
